{"version":3,"sources":["Contacts/Contacts.app.js","Contacts/AddressBookController.js","Contacts/AddressBooksController.js","Contacts/CardController.js","Contacts/sgAddress.directive.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","addressbooks","templateUrl","controller","controllerAs","resolve","stateAddressbooks","addressbook","stateAddressbook","card","stateCard","stateNewCard","template","onEnter","onEnterCard","onExit","onExitCard","card@app.addressbook","otherwise","AddressBook","$findAll","window","contactFolders","$q","$state","$stateParams","_","find","id","addressbookId","selectedCard","$reload","reject","Card","tag","contactType","pid","c_component","$cards","cardObject","cardId","go","stateMailbox","runBlock","$rootScope","$log","$on","event","toState","toParams","fromState","fromParams","error","current","previous","rejection","angular","module","config","run","$inject","AddressBookController","$scope","$window","$timeout","$mdDialog","Account","Dialog","Settings","selectCard","toggleCardSelection","$event","selected","vm","mode","multiple","preventDefault","stopPropagation","newComponent","type","unselectCards","forEach","selectedFolder","confirmDeleteSelectedCards","confirm","l","ok","then","selectedCards","filter","$deleteCards","copySelectedCards","folder","$copyCards","selectAll","length","sort","field","$filter","sortedBy","$query","cancelSearch","search","newMessage","recipients","accounts","account","o","$getMailboxes","mailboxes","$newMessage","message","extend","editable","to","show","parent","element","document","body","targetEvent","clickOutsideToClose","escapeToClose","locals","stateAccount","stateMessage","newMessageWithRecipient","recipient","fn","newMessageWithSelectedCards","promises","$isList","expandable","isDefined","refs","ref","email","push","$shortFormat","c_mail","all","uniq","this","service","AddressBooksController","$mdToast","$mdMedia","$mdSidenav","FileUploader","sgConstant","focus","User","select","params","editMode","value","close","newAddressbook","prompt","name","isEditable","isRemote","owner","UserLogin","$add","edit","originalAddressbook","$omit","revertEditing","save","$rename","data","status","alert","confirmDelete","isSubscription","$delete","response","statusText","importCards","CardsImportDialogController","scope","filterByExtension","item","isTextFile","indexOf","test","join","position","hideDelay","uploader","ApplicationBaseURL","autoUpload","queueLimit","filters","onSuccessItem","headers","msg","hide","imported","simple","content","onErrorItem","showLinks","LinksDialogController","showProperties","PropertiesDialogController","srcAddressBook","saveProperties","$save","init","cancel","share","$acl","$users","usersWithACL","users","subscribeToFolder","addressbookData","console","debug","$subscribe","activeUser","CardController","transformCategory","input","isString","addOrgUnit","i","$addOrgUnit","addBirthday","birthday","Date","addScreenName","$addScreenName","addEmail","$addEmail","addPhone","$addPhone","addUrl","$addUrl","addAddress","$addAddress","userFilter","excludedCards","dry","excludeLists","$$cards","form","$valid","map","copy","reset","$reset","isNew","$fullname","toggleRawSource","showRawSource","rawSource","$$resource","post","currentFolder","allEmailTypes","$EMAIL_TYPES","allTelTypes","$TEL_TYPES","allUrlTypes","$URL_TYPES","allAddressTypes","$ADDRESS_TYPES","categories","userFilterResults","sgAddress","restrict","addressLines","lines","locality_region","street","street2","locality","region","country","postalcode","directive"],"mappings":"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","file":"Contacts.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoContacts */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.ContactsUI', ['ngCookies', 'ui.router', 'angularFileUpload', 'ck', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/addressbooks',\n        abstract: true,\n        views: {\n          addressbooks: {\n            templateUrl: 'UIxContactFoldersView', // UI/Templates/Contacts/UIxContactFoldersView.wox\n            controller: 'AddressBooksController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAddressbooks: stateAddressbooks\n        }\n      })\n      .state('app.addressbook', {\n        url: '/:addressbookId',\n        views: {\n          addressbook: {\n            templateUrl: 'addressbook',\n            controller: 'AddressBookController',\n            controllerAs: 'addressbook'\n          }\n        },\n        resolve: {\n          stateAddressbook: stateAddressbook\n        }\n      })\n      .state('app.addressbook.new', {\n        url: '/{contactType:(?:card|list)}/new',\n        views: {\n          card: {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateCard: stateNewCard\n        }\n      })\n      .state('app.addressbook.card', {\n        url: '/:cardId',\n        abstract: true,\n        views: {\n          card: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateCard: stateCard\n        },\n        onEnter: onEnterCard,\n        onExit: onExitCard\n      })\n      .state('app.addressbook.card.view', {\n        url: '/view',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactViewTemplate', // UI/Templates/Contacts/UIxContactViewTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      })\n      .state('app.addressbook.card.editor', {\n        url: '/edit',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/addressbooks/personal');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbooks.$inject = ['AddressBook'];\n  function stateAddressbooks(AddressBook) {\n    return AddressBook.$findAll(window.contactFolders);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbook.$inject = ['$q', '$state', '$stateParams', 'AddressBook'];\n  function stateAddressbook($q, $state, $stateParams, AddressBook) {\n    var addressbook = _.find(AddressBook.$findAll(), function(addressbook) {\n      return addressbook.id == $stateParams.addressbookId;\n    });\n    if (addressbook) {\n      addressbook.selectedCard = false;\n      addressbook.$reload();\n      return addressbook;\n    }\n    return $q.reject('Addressbook ' + $stateParams.addressbookId + ' not found');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewCard.$inject = ['$stateParams', 'stateAddressbook', 'Card'];\n  function stateNewCard($stateParams, stateAddressbook, Card) {\n    var tag = 'v' + $stateParams.contactType,\n        card = new Card({ pid: $stateParams.addressbookId, c_component: tag });\n    stateAddressbook.selectedCard = true;\n    return card;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCard.$inject = ['$state', '$stateParams', 'stateAddressbook'];\n  function stateCard($state, $stateParams, stateAddressbook) {\n    var card;\n\n    card = _.find(stateAddressbook.$cards, function(cardObject) {\n      return (cardObject.id == $stateParams.cardId);\n    });\n\n    if (card) {\n      return card.$reload();\n    }\n    else {\n      // Card not found\n      $state.go('app.addressbook');\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  onEnterCard.$inject = ['$stateParams', 'stateAddressbook'];\n  function onEnterCard($stateParams, stateAddressbook) {\n    stateAddressbook.selectedCard = $stateParams.cardId;\n  }\n\n  /**\n   * @ngInject\n   */\n  onExitCard.$inject = ['stateAddressbook'];\n  function onExitCard(stateMailbox) {\n    delete stateAddressbook.selectedCard;\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$state'];\n  function runBlock($rootScope, $log, $state) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('app.addressbook', { addressbookId: 'personal' });\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBookController.$inject = ['$scope', '$q', '$window', '$state', '$timeout', '$mdDialog', 'Account', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'stateAddressbooks', 'stateAddressbook'];\n  function AddressBookController($scope, $q, $window, $state, $timeout, $mdDialog, Account, Card, AddressBook, Dialog, Settings, stateAddressbooks, stateAddressbook) {\n    var vm = this;\n\n    AddressBook.selectedFolder = stateAddressbook;\n\n    vm.service = AddressBook;\n    vm.selectedFolder = stateAddressbook;\n    vm.selectCard = selectCard;\n    vm.toggleCardSelection = toggleCardSelection;\n    vm.newComponent = newComponent;\n    vm.unselectCards = unselectCards;\n    vm.confirmDeleteSelectedCards = confirmDeleteSelectedCards;\n    vm.copySelectedCards = copySelectedCards;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.newMessageWithSelectedCards = newMessageWithSelectedCards;\n    vm.newMessageWithRecipient = newMessageWithRecipient;\n    vm.mode = { search: false, multiple: 0 };\n    \n    function selectCard(card) {\n      $state.go('app.addressbook.card.view', {cardId: card.id});\n    }\n    \n    function toggleCardSelection($event, card) {\n      card.selected = !card.selected;\n      vm.mode.multiple += card.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function newComponent(type) {\n      $state.go('app.addressbook.new', { contactType: type });\n    }\n\n    function unselectCards() {\n      _.forEach(vm.selectedFolder.$cards, function(card) {\n        card.selected = false;\n      });\n      vm.mode.multiple = 0;\n    }\n    \n    function confirmDeleteSelectedCards() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected contacts?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          var selectedCards = _.filter(vm.selectedFolder.$cards, function(card) { return card.selected; });\n          vm.selectedFolder.$deleteCards(selectedCards);\n          delete vm.selectedFolder.selectedCard;\n        });\n    }\n\n    function copySelectedCards(folder) {\n      var selectedCards = _.filter(vm.selectedFolder.$cards, function(card) { return card.selected; });\n      vm.selectedFolder.$copyCards(selectedCards, folder).then(function() {\n        // TODO: refresh target addressbook?\n      });\n    }\n\n    function selectAll() {\n      _.forEach(vm.selectedFolder.$cards, function(card) {\n        card.selected = true;\n      });\n      vm.mode.multiple = vm.selectedFolder.$cards.length;\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter('', { sort: field });\n    }\n\n    function sortedBy(field) {\n      return AddressBook.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter('');\n    }\n\n    function newMessage($event, recipients) {\n      Account.$findAll().then(function(accounts) {\n        var account = _.find(accounts, function(o) {\n          if (o.id === 0)\n            return o;\n        });\n\n        // We must initialize the Account with its mailbox\n        // list before proceeding with message's creation\n        account.$getMailboxes().then(function(mailboxes) {\n          account.$newMessage().then(function(message) {\n            angular.extend(message.editable, { to: recipients });\n            $mdDialog.show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: '../Mail/UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: account,\n                stateMessage: message\n              }\n            });\n          });\n        });\n      });\n    }\n\n    function newMessageWithRecipient($event, recipient, fn) {\n      var recipients = [fn + ' <' + recipient + '>'];\n      vm.newMessage($event, recipients);\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function newMessageWithSelectedCards($event) {\n      var selectedCards = _.filter(vm.selectedFolder.$cards, function(card) { return card.selected; });\n      var promises = [], recipients = [];\n\n      _.forEach(selectedCards, function(card) {\n        if (card.$isList({expandable: true})) {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.forEach(card.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          }\n          else {\n            promises.push(card.$reload().then(function(card) {\n              _.forEach(card.refs, function(ref) {\n                if (ref.email.length)\n                  recipients.push(ref.$shortFormat());\n              });\n            }));\n          }\n        }\n        else if (card.c_mail.length) {\n          recipients.push(card.$shortFormat());\n        }\n      });\n\n      $q.all(promises).then(function() {\n        recipients = _.uniq(recipients);\n        if (recipients.length)\n          vm.newMessage($event, recipients);\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')  \n    .controller('AddressBookController', AddressBookController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBooksController.$inject = ['$state', '$scope', '$rootScope', '$stateParams', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'FileUploader', 'sgConstant', 'sgFocus', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'User', 'stateAddressbooks'];\n  function AddressBooksController($state, $scope, $rootScope, $stateParams, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, FileUploader, sgConstant, focus, Card, AddressBook, Dialog, Settings, User, stateAddressbooks) {\n    var vm = this;\n\n    vm.activeUser = Settings.activeUser;\n    vm.service = AddressBook;\n    vm.select = select;\n    vm.newAddressbook = newAddressbook;\n    vm.edit = edit;\n    vm.revertEditing = revertEditing;\n    vm.save = save;\n    vm.confirmDelete = confirmDelete;\n    vm.importCards = importCards;\n    vm.showLinks = showLinks;\n    vm.showProperties = showProperties;\n    vm.share = share;\n    vm.subscribeToFolder = subscribeToFolder;\n\n    function select($event, folder) {\n      if ($state.params.addressbookId != folder.id &&\n          vm.editMode != folder.id) {\n        vm.editMode = false;\n        AddressBook.$query.value = '';\n        // Close sidenav on small devices\n        if (!$mdMedia(sgConstant['gt-md']))\n          $mdSidenav('left').close();\n        $state.go('app.addressbook', {addressbookId: folder.id});\n      }\n      else {\n        $event.preventDefault();\n        $event.stopPropagation();\n      }\n    }\n\n    function newAddressbook() {\n      Dialog.prompt(l('New addressbook'),\n                    l('Name of new addressbook'))\n        .then(function(name) {\n          var addressbook = new AddressBook(\n            {\n              name: name,\n              isEditable: true,\n              isRemote: false,\n              owner: UserLogin\n            }\n          );\n          AddressBook.$add(addressbook);\n        });\n    }\n\n    function edit(folder) {\n      if (!folder.isRemote) {\n        vm.editMode = folder.id;\n        vm.originalAddressbook = angular.extend({}, folder.$omit());\n        focus('addressBookName_' + folder.id);\n      }\n    }\n\n    function revertEditing(folder) {\n      folder.name = vm.originalAddressbook.name;\n      vm.editMode = false;\n    }\n\n    function save(folder) {\n      var name = folder.name;\n      if (name && name.length > 0 && name != vm.originalAddressbook.name) {\n        folder.$rename(name)\n          .then(function(data) {\n            vm.editMode = false;\n          }, function(data, status) {\n            Dialog.alert(l('Warning'), data);\n          });\n      }\n    }\n\n    function confirmDelete() {\n      if (vm.service.selectedFolder.isSubscription) {\n        // Unsubscribe without confirmation\n        vm.service.selectedFolder.$delete()\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n          }, function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n      else {\n        Dialog.confirm(l('Warning'), l('Are you sure you want to delete the addressbook \"%{0}\"?',\n                                       vm.service.selectedFolder.name),\n                       { ok: l('Delete') })\n          .then(function() {\n            return vm.service.selectedFolder.$delete();\n          })\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n            return true;\n          })\n          .catch(function(response) {\n            var message = response.data.message || response.statusText;\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                        message);\n          });\n      }\n    }\n\n    function importCards($event, folder) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: $event,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: 'UIxContactsImportDialog',\n        controller: CardsImportDialogController,\n        controllerAs: '$CardsImportDialogController',\n        locals: {\n          folder: folder\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      CardsImportDialogController.$inject = ['scope', '$mdDialog', 'folder'];\n      function CardsImportDialogController(scope, $mdDialog, folder) {\n        var vm = this;\n\n        vm.uploader = new FileUploader({\n          url: ApplicationBaseURL + [folder.id, 'import'].join('/'),\n          autoUpload: true,\n          queueLimit: 1,\n          filters: [{ name: filterByExtension, fn: filterByExtension }],\n          onSuccessItem: function(item, response, status, headers) {\n            var msg;\n\n            $mdDialog.hide();\n\n            if (response.imported === 0)\n              msg = l('No card was imported.');\n            else {\n              msg = l('A total of %{0} cards were imported in the addressbook.', response.imported);\n              AddressBook.selectedFolder.$reload();\n            }\n\n            $mdToast.show(\n              $mdToast.simple()\n                .content(msg)\n                .position('top right')\n                .hideDelay(3000));\n          },\n          onErrorItem: function(item, response, status, headers) {\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('An error occured while importing contacts.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n          }\n        });\n\n        vm.close = function() {\n          $mdDialog.hide();\n        };\n\n        function filterByExtension(item) {\n          var isTextFile = item.type.indexOf('text') === 0 ||\n              /\\.(ldif|vcf|vcard)$/.test(item.name);\n\n          if (!isTextFile)\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('Select a vCard or LDIF file.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n\n          return isTextFile;\n        }\n      }\n    }\n\n    function showLinks(addressbook) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: addressbook.id + '/links',\n        controller: LinksDialogController,\n        controllerAs: 'links',\n        locals: {\n          addressbook: addressbook\n        }\n      });\n      \n      /**\n       * @ngInject\n       */\n      LinksDialogController.$inject = ['$mdDialog', 'addressbook'];\n      function LinksDialogController($mdDialog, addressbook) {\n        var vm = this;\n        this.addressbook = addressbook;\n        this.close = close;\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    }\n\n    function showProperties(addressbook) {\n      $mdDialog.show({\n        templateUrl: addressbook.id + '/properties',\n        controller: PropertiesDialogController,\n        controllerAs: 'properties',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAddressBook: addressbook\n        }\n      }).catch(function() {\n        // Do nothing\n      });\n\n      /**\n       * @ngInject\n       */\n      PropertiesDialogController.$inject = ['$scope', '$mdDialog', 'srcAddressBook'];\n      function PropertiesDialogController($scope, $mdDialog, srcAddressBook) {\n        var vm = this;\n\n        vm.addressbook = new AddressBook(srcAddressBook.$omit());\n        vm.saveProperties = saveProperties;\n        vm.close = close;\n\n        function saveProperties() {\n          vm.addressbook.$save().then(function() {\n            // Refresh list instance\n            srcAddressBook.init(vm.addressbook.$omit());\n            $mdDialog.hide();\n          });\n        }\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function share(addressbook) {\n      // Fetch list of ACL users\n      addressbook.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: addressbook.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: addressbook.$acl.users,\n            User: User,\n            folder: addressbook\n          }\n        });\n      });\n    }\n\n    /**\n     * subscribeToFolder - Callback of sgSubscribe directive\n     */\n    function subscribeToFolder(addressbookData) {\n      console.debug('subscribeToFolder ' + addressbookData.owner + addressbookData.name);\n      AddressBook.$subscribe(addressbookData.owner, addressbookData.name).then(function(data) {\n         $mdToast.show(\n           $mdToast.simple()\n             .content(l('Successfully subscribed to address book'))\n             .position('top right')\n             .hideDelay(3000));\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBooksController', AddressBooksController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * Controller to view and edit a card\n   * @ngInject\n   */\n  CardController.$inject = ['$scope', '$timeout', '$window', '$mdDialog', 'AddressBook', 'Card', 'Dialog', 'sgFocus', '$state', '$stateParams', 'stateCard'];\n  function CardController($scope, $timeout, $window, $mdDialog, AddressBook, Card, Dialog, focus, $state, $stateParams, stateCard) {\n    var vm = this;\n\n    vm.card = stateCard;\n\n    vm.currentFolder = AddressBook.selectedFolder;\n    vm.allEmailTypes = Card.$EMAIL_TYPES;\n    vm.allTelTypes = Card.$TEL_TYPES;\n    vm.allUrlTypes = Card.$URL_TYPES;\n    vm.allAddressTypes = Card.$ADDRESS_TYPES;\n    vm.categories = {};\n    vm.userFilterResults = [];\n    vm.transformCategory = transformCategory;\n    vm.addOrgUnit = addOrgUnit;\n    vm.addBirthday = addBirthday;\n    vm.addScreenName = addScreenName;\n    vm.addEmail = addEmail;\n    vm.addPhone = addPhone;\n    vm.addUrl = addUrl;\n    vm.addAddress = addAddress;\n    vm.userFilter = userFilter;\n    vm.save = save;\n    vm.close = close;\n    vm.reset = reset;\n    vm.cancel = cancel;\n    vm.confirmDelete = confirmDelete;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n    function transformCategory(input) {\n      if (angular.isString(input))\n        return { value: input };\n      else\n        return input;\n    }\n    function addOrgUnit() {\n      var i = vm.card.$addOrgUnit('');\n      focus('orgUnit_' + i);\n    }\n    function addBirthday() {\n      vm.card.birthday = new Date();\n    }\n    function addScreenName() {\n      vm.card.$addScreenName('');\n    }\n    function addEmail() {\n      var i = vm.card.$addEmail('');\n      focus('email_' + i);\n    }\n    function addPhone() {\n      var i = vm.card.$addPhone('');\n      focus('phone_' + i);\n    }\n    function addUrl() {\n      var i = vm.card.$addUrl('', '');\n      focus('url_' + i);\n    }\n    function addAddress() {\n      var i = vm.card.$addAddress('', '', '', '', '', '', '', '');\n      focus('address_' + i);\n    }\n    function userFilter($query, excludedCards) {\n      AddressBook.selectedFolder.$filter($query, {dry: true, excludeLists: true}, excludedCards);\n      return AddressBook.selectedFolder.$$cards;\n    }\n    function save(form) {\n      if (form.$valid) {\n        vm.card.$save()\n          .then(function(data) {\n            var i = _.indexOf(_.map(AddressBook.selectedFolder.$cards, 'id'), vm.card.id);\n            if (i < 0) {\n              // New card; reload contacts list and show addressbook in which the card has been created\n              AddressBook.selectedFolder.$reload();\n            }\n            else {\n              // Update contacts list with new version of the Card object\n              AddressBook.selectedFolder.$cards[i] = angular.copy(vm.card);\n            }\n            $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n          });\n      }\n    }\n    function close() {\n      $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id }).then(function() {\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n      });\n    }\n    function reset() {\n      vm.card.$reset();\n    }\n    function cancel() {\n      vm.card.$reset();\n      if (vm.card.isNew) {\n        // Cancelling the creation of a card\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n        $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n      }\n      else {\n        // Cancelling the edition of an existing card\n        $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n      }\n    }\n    function confirmDelete(card) {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the card of %{0}?', '<b>' + card.$fullname() + '</b>'),\n                     { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          card.$delete()\n            .then(function() {\n              // Remove card from addressbook\n              AddressBook.selectedFolder.$cards = _.reject(AddressBook.selectedFolder.$cards, function(o) {\n                return o.id == card.id;\n              });\n              close();\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), l('An error occured while deleting the card \"%{0}\".',\n                                           card.$fullname()));\n            });\n        });\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Card.$$resource.post(vm.currentFolder.id + '/' + vm.card.id, \"raw\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('CardController', CardController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name sgAddress\n   * @memberof ContactsUI\n   * @desc Directive to format a postal address.\n   * @ngInject\n   */\n  function sgAddress() {\n    return {\n      restrict: 'A',\n      scope: { data: '=sgAddress' },\n      controller: ['$scope', function($scope) {\n        $scope.addressLines = function(data) {\n          var lines = [],\n              locality_region = [];\n          if (data.street) lines.push(data.street);\n          if (data.street2) lines.push(data.street2);\n          if (data.locality) locality_region.push(data.locality);\n          if (data.region) locality_region.push(data.region);\n          if (locality_region.length > 0) lines.push(locality_region.join(', '));\n          if (data.country) lines.push(data.country);\n          if (data.postalcode) lines.push(data.postalcode);\n          return lines.join('<br>');\n        };\n      }],\n      template: '<address ng-bind-html=\"addressLines(data)\"></address>'\n    };\n  }\n  \n  angular\n    .module('SOGo.Common')\n    .directive('sgAddress', sgAddress);\n})();\n"]}