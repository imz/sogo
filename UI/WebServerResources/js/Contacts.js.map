{"version":3,"sources":["Contacts/Contacts.app.js","Contacts/AddressBookController.js","Contacts/AddressBooksController.js","Contacts/CardController.js","Contacts/sgAddress.directive.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","addressbooks","templateUrl","controller","controllerAs","resolve","stateAddressbooks","addressbook","stateAddressbook","card","stateCard","stateNewCard","template","card@app.addressbook","otherwise","AddressBook","$findAll","window","contactFolders","$q","$state","$stateParams","_","find","id","addressbookId","selectedCard","$reload","reject","Card","tag","contactType","pid","c_component","cardId","$getCard","runBlock","$rootScope","$log","$on","event","toState","toParams","fromState","fromParams","error","go","current","previous","rejection","angular","module","config","run","$inject","AddressBookController","$scope","$window","$timeout","$mdDialog","Account","Dialog","Settings","selectCard","toggleCardSelection","$event","selected","preventDefault","stopPropagation","newComponent","ev","ComponentDialogController","scope","create","type","hide","show","parent","element","document","body","targetEvent","clickOutsideToClose","escapeToClose","l","join","locals","vm","selectedFolder","notSelectedComponent","currentCard","unselectCards","each","cards","confirmDeleteSelectedCards","confirm","then","selectedCards","filter","$deleteCards","data","status","saveSelectedCards","selectedUIDs","pluck","location","href","ApplicationBaseURL","copySelectedCards","folder","$copyCards","alert","selectAll","sort","field","$filter","sortedBy","$query","cancelSearch","mode","search","newMessage","recipients","accounts","account","o","$getMailboxes","mailboxes","$newMessage","message","stateAccounts","stateMessage","stateRecipients","newMessageWithRecipient","recipient","fn","full","newMessageWithSelectedCards","promises","c_mail","length","push","c_cn","$isList","isDefined","refs","ref","email","$futureCardData","all","this","service","AddressBooksController","$mdToast","$mdMedia","$mdSidenav","FileUploader","focus","User","select","params","editMode","value","close","newAddressbook","prompt","name","isEditable","isRemote","owner","UserLogin","$add","edit","originalAddressbook","extend","$omit","revertEditing","save","$rename","confirmDelete","isSubscription","$delete","response","statusText","importCards","CardsImportDialogController","filterByExtension","item","isTextFile","indexOf","test","position","hideDelay","uploader","autoUpload","queueLimit","filters","onSuccessItem","headers","msg","imported","simple","content","onErrorItem","exportCards","showLinks","LinksDialogController","showProperties","PropertiesDialogController","srcAddressBook","saveProperties","$save","init","cancel","share","$acl","$users","usersWithACL","users","subscribeToFolder","addressbookData","console","debug","$subscribe","activeUser","CardController","transformCategory","input","isString","addOrgUnit","i","$addOrgUnit","addBirthday","birthday","Date","addScreenName","$addScreenName","addEmail","$addEmail","addPhone","$addPhone","addUrl","$addUrl","addAddress","$addAddress","addMember","$addMember","userFilter","excludedCards","dry","excludeLists","$cards","form","$valid","copy","reset","$reset","isNew","$fullname","ok","exportCard","currentFolder","toggleRawSource","showRawSource","rawSource","$$resource","post","allEmailTypes","$EMAIL_TYPES","allTelTypes","$TEL_TYPES","allUrlTypes","$URL_TYPES","allAddressTypes","$ADDRESS_TYPES","categories","userFilterResults","sgAddress","restrict","addressLines","lines","locality_region","street","street2","locality","region","country","postalcode","directive"],"mappings":"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","file":"Contacts.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoContacts */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.ContactsUI', ['ui.router', 'angularFileUpload', 'ck', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/addressbooks',\n        abstract: true,\n        views: {\n          addressbooks: {\n            templateUrl: 'UIxContactFoldersView', // UI/Templates/Contacts/UIxContactFoldersView.wox\n            controller: 'AddressBooksController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAddressbooks: stateAddressbooks\n        }\n      })\n      .state('app.addressbook', {\n        url: '/:addressbookId',\n        views: {\n          addressbook: {\n            templateUrl: 'addressbook',\n            controller: 'AddressBookController',\n            controllerAs: 'addressbook'\n          }\n        },\n        resolve: {\n          stateAddressbook: stateAddressbook\n        }\n      })\n      .state('app.addressbook.new', {\n        url: '/{contactType:(?:card|list)}/new',\n        views: {\n          card: {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateCard: stateNewCard\n        }\n      })\n      .state('app.addressbook.card', {\n        url: '/:cardId',\n        abstract: true,\n        views: {\n          card: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateCard: stateCard\n        }\n      })\n      .state('app.addressbook.card.view', {\n        url: '/view',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactViewTemplate', // UI/Templates/Contacts/UIxContactViewTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      })\n      .state('app.addressbook.card.editor', {\n        url: '/edit',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/addressbooks/personal');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbooks.$inject = ['AddressBook'];\n  function stateAddressbooks(AddressBook) {\n    return AddressBook.$findAll(window.contactFolders);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbook.$inject = ['$q', '$state', '$stateParams', 'AddressBook'];\n  function stateAddressbook($q, $state, $stateParams, AddressBook) {\n    var addressbook = _.find(AddressBook.$findAll(), function(addressbook) {\n      return addressbook.id == $stateParams.addressbookId;\n    });\n    if (addressbook) {\n      addressbook.selectedCard = false;\n      addressbook.$reload();\n      return addressbook;\n    }\n    return $q.reject('Addressbook ' + $stateParams.addressbookId + ' not found');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewCard.$inject = ['$stateParams', 'stateAddressbook', 'Card'];\n  function stateNewCard($stateParams, stateAddressbook, Card) {\n    var tag = 'v' + $stateParams.contactType,\n        card = new Card({ pid: $stateParams.addressbookId, c_component: tag });\n    stateAddressbook.selectedCard = true;\n    return card;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCard.$inject = ['$stateParams', 'stateAddressbook'];\n  function stateCard($stateParams, stateAddressbook) {\n    stateAddressbook.selectedCard = $stateParams.cardId;\n    return stateAddressbook.$getCard($stateParams.cardId);\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$state'];\n  function runBlock($rootScope, $log, $state) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('app.addressbook', { addressbookId: 'personal' });\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBookController.$inject = ['$scope', '$q', '$window', '$state', '$timeout', '$mdDialog', 'Account', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'stateAddressbooks', 'stateAddressbook'];\n  function AddressBookController($scope, $q, $window, $state, $timeout, $mdDialog, Account, Card, AddressBook, Dialog, Settings, stateAddressbooks, stateAddressbook) {\n    var vm = this;\n\n    AddressBook.selectedFolder = stateAddressbook;\n\n    vm.service = AddressBook;\n    vm.selectedFolder = stateAddressbook;\n    vm.selectCard = selectCard;\n    vm.toggleCardSelection = toggleCardSelection;\n    vm.newComponent = newComponent;\n    vm.notSelectedComponent = notSelectedComponent;\n    vm.unselectCards = unselectCards;\n    vm.confirmDeleteSelectedCards = confirmDeleteSelectedCards;\n    vm.saveSelectedCards = saveSelectedCards;\n    vm.copySelectedCards = copySelectedCards;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.newMessageWithSelectedCards = newMessageWithSelectedCards;\n    vm.newMessageWithRecipient = newMessageWithRecipient;\n    vm.mode = { search: false };\n    \n    function selectCard(card) {\n      $state.go('app.addressbook.card.view', {addressbookId: stateAddressbook.id, cardId: card.id});\n    }\n    \n    function toggleCardSelection($event, card) {\n      card.selected = !card.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function newComponent(ev) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: ev,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        template: [\n          '<md-dialog aria-label=\"' + l('Create component') + '\">',\n          '  <md-dialog-content>',\n          '    <div layout=\"column\">',\n          '      <md-button ng-click=\"create(\\'card\\')\">',\n          '        ' + l('Contact'),\n          '      </md-button>',\n          '      <md-button ng-click=\"create(\\'list\\')\">',\n          '        ' + l('List'),\n          '      </md-button>',\n          '    </div>',\n          '  </md-dialog-content>',\n          '</md-dialog>'\n        ].join(''),\n        locals: {\n          addressbookId: vm.selectedFolder.id\n        },\n        controller: ComponentDialogController\n      });\n      \n      /**\n       * @ngInject\n       */\n      ComponentDialogController.$inject = ['scope', '$mdDialog', '$state', 'addressbookId'];\n      function ComponentDialogController(scope, $mdDialog, $state, addressbookId) {\n        scope.create = function(type) {\n          $mdDialog.hide();\n          $state.go('app.addressbook.new', { addressbookId: addressbookId, contactType: type });\n        };\n      }\n    }\n\n    function notSelectedComponent(currentCard, type) {\n      return (currentCard && currentCard.c_component == type && !currentCard.selected);\n    }\n\n    function unselectCards() {\n      _.each(vm.selectedFolder.cards, function(card) { card.selected = false; });\n    }\n    \n    function confirmDeleteSelectedCards() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected contacts?'))\n        .then(function() {\n          // User confirmed the deletion\n          var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n          vm.selectedFolder.$deleteCards(selectedCards);\n          delete vm.selectedFolder.selectedCard;\n        },  function(data, status) {\n          // Delete failed\n        });\n    }\n\n    function saveSelectedCards() {\n      var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n      var selectedUIDs = _.pluck(selectedCards, 'id');\n      $window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/export?uid=' + selectedUIDs.join('&uid=');\n    }\n\n    function copySelectedCards(folder) {\n      var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n      vm.selectedFolder.$copyCards(selectedCards, folder).then(function() {\n        // TODO: refresh target addressbook?\n      }, function(error) {\n        Dialog.alert(l('Error'), error);\n      });\n    }\n\n    function selectAll() {\n      _.each(vm.selectedFolder.cards, function(card) {\n        card.selected = true;\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter('', { sort: field });\n    }\n\n    function sortedBy(field) {\n      return AddressBook.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter('');\n    }\n\n    function newMessage($event, recipients) {\n      Account.$findAll().then(function(accounts) {\n        var account = _.filter(accounts, function(o) {\n          if (o.id === 0)\n            return o;\n        })[0];\n\n        // We must initialize the Account with its mailbox\n        // list before proceeding with message's creation\n        account.$getMailboxes().then(function(mailboxes) {\n          account.$newMessage().then(function(message) {\n            $mdDialog.show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: '../Mail/UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccounts: accounts,\n                stateMessage: message,\n                stateRecipients: recipients\n              }\n            });\n          });\n        });\n      });\n    }\n\n    function newMessageWithRecipient($event, recipient, fn) {\n      var recipients = [{full: fn + ' <' + recipient + '>'}];\n      vm.newMessage($event, recipients);\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function newMessageWithSelectedCards($event) {\n      var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n      var promises = [], recipients = [];\n\n      _.each(selectedCards, function(card) {\n        if (card.c_component == 'vcard' && card.c_mail.length) {\n          recipients.push({full: card.c_cn + ' <' + card.c_mail + '>'});\n        }\n        else if (card.$isList()) {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.each(card.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push({full: ref.c_cn + ' <' + ref.email + '>'});\n            });\n          }\n          else {\n            promises.push(vm.selectedFolder.$getCard(card.id).then(function(card) {\n              return card.$futureCardData.then(function(data) {\n                _.each(data.refs, function(ref) {\n                  if (ref.email.length)\n                    recipients.push({full: ref.c_cn + ' <' + ref.email + '>'});\n                });\n              });\n            }));\n          }\n        }\n      });\n\n      $q.all(promises).then(function() {\n        if (recipients.length)\n          vm.newMessage($event, recipients);\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')  \n    .controller('AddressBookController', AddressBookController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBooksController.$inject = ['$state', '$scope', '$rootScope', '$stateParams', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'FileUploader', 'sgFocus', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'User', 'stateAddressbooks'];\n  function AddressBooksController($state, $scope, $rootScope, $stateParams, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, FileUploader, focus, Card, AddressBook, Dialog, Settings, User, stateAddressbooks) {\n    var vm = this;\n\n    vm.activeUser = Settings.activeUser;\n    vm.service = AddressBook;\n    vm.select = select;\n    vm.newAddressbook = newAddressbook;\n    vm.edit = edit;\n    vm.revertEditing = revertEditing;\n    vm.save = save;\n    vm.confirmDelete = confirmDelete;\n    vm.importCards = importCards;\n    vm.exportCards = exportCards;\n    vm.showLinks = showLinks;\n    vm.showProperties = showProperties;\n    vm.share = share;\n    vm.subscribeToFolder = subscribeToFolder;\n\n    function select($event, folder) {\n      if ($state.params.addressbookId != folder.id &&\n          vm.editMode != folder.id) {\n        vm.editMode = false;\n        AddressBook.$query.value = '';\n        // Close sidenav on small devices\n        if ($mdMedia('xs'))\n          $mdSidenav('left').close();\n        $state.go('app.addressbook', {addressbookId: folder.id});\n      }\n      else {\n        $event.preventDefault();\n        $event.stopPropagation();\n      }\n    }\n\n    function newAddressbook() {\n      Dialog.prompt(l('New addressbook'),\n                    l('Name of new addressbook'))\n        .then(function(name) {\n          var addressbook = new AddressBook(\n            {\n              name: name,\n              isEditable: true,\n              isRemote: false,\n              owner: UserLogin\n            }\n          );\n          AddressBook.$add(addressbook);\n        });\n    }\n\n    function edit(folder) {\n      if (!folder.isRemote) {\n        vm.editMode = folder.id;\n        vm.originalAddressbook = angular.extend({}, folder.$omit());\n        focus('addressBookName_' + folder.id);\n      }\n    }\n\n    function revertEditing(folder) {\n      folder.name = vm.originalAddressbook.name;\n      vm.editMode = false;\n    }\n\n    function save(folder) {\n      var name = folder.name;\n      if (name && name.length > 0 && name != vm.originalAddressbook.name) {\n        folder.$rename(name)\n          .then(function(data) {\n            vm.editMode = false;\n          }, function(data, status) {\n            Dialog.alert(l('Warning'), data);\n          });\n      }\n    }\n\n    function confirmDelete() {\n      if (vm.service.selectedFolder.isSubscription) {\n        // Unsubscribe without confirmation\n        vm.service.selectedFolder.$delete()\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n          }, function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n      else {\n        Dialog.confirm(l('Warning'), l('Are you sure you want to delete the addressbook <em>%{0}</em>?',\n                                       vm.service.selectedFolder.name))\n          .then(function() {\n            return vm.service.selectedFolder.$delete();\n          })\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n            return true;\n          })\n          .catch(function(response) {\n            var message = response.data.message || response.statusText;\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                        message);\n          });\n      }\n    }\n\n    function importCards($event, folder) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: $event,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: 'UIxContactsImportDialog',\n        controller: CardsImportDialogController,\n        controllerAs: '$CardsImportDialogController',\n        locals: {\n          folder: folder\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      CardsImportDialogController.$inject = ['scope', '$mdDialog', 'folder'];\n      function CardsImportDialogController(scope, $mdDialog, folder) {\n        var vm = this;\n\n        vm.uploader = new FileUploader({\n          url: ApplicationBaseURL + [folder.id, 'import'].join('/'),\n          autoUpload: true,\n          queueLimit: 1,\n          filters: [{ name: filterByExtension, fn: filterByExtension }],\n          onSuccessItem: function(item, response, status, headers) {\n            var msg;\n\n            $mdDialog.hide();\n\n            if (response.imported === 0)\n              msg = l('No card was imported.');\n            else {\n              msg = l('A total of %{0} cards were imported in the addressbook.', response.imported);\n              AddressBook.selectedFolder.$reload();\n            }\n\n            $mdToast.show(\n              $mdToast.simple()\n                .content(msg)\n                .position('top right')\n                .hideDelay(3000));\n          },\n          onErrorItem: function(item, response, status, headers) {\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('An error occured while importing contacts.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n          }\n        });\n\n        vm.close = function() {\n          $mdDialog.hide();\n        };\n\n        function filterByExtension(item) {\n          var isTextFile = item.type.indexOf('text') === 0 ||\n              /\\.(ldif|vcf|vcard)$/.test(item.name);\n\n          if (!isTextFile)\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('Select a vCard or LDIF file.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n\n          return isTextFile;\n        }\n      }\n    }\n\n    function exportCards() {\n      $window.location.href = ApplicationBaseURL + '/' + vm.service.selectedFolder.id + '/exportFolder';\n    }\n\n    function showLinks(addressbook) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: addressbook.id + '/links',\n        controller: LinksDialogController,\n        controllerAs: 'links',\n        locals: {\n          addressbook: addressbook\n        }\n      });\n      \n      /**\n       * @ngInject\n       */\n      LinksDialogController.$inject = ['$mdDialog', 'addressbook'];\n      function LinksDialogController($mdDialog, addressbook) {\n        var vm = this;\n        this.addressbook = addressbook;\n        this.close = close;\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    }\n\n    function showProperties(addressbook) {\n      $mdDialog.show({\n        templateUrl: addressbook.id + '/properties',\n        controller: PropertiesDialogController,\n        controllerAs: 'properties',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAddressBook: addressbook\n        }\n      }).catch(function() {\n        // Do nothing\n      });\n\n      /**\n       * @ngInject\n       */\n      PropertiesDialogController.$inject = ['$scope', '$mdDialog', 'srcAddressBook'];\n      function PropertiesDialogController($scope, $mdDialog, srcAddressBook) {\n        var vm = this;\n\n        vm.addressbook = new AddressBook(srcAddressBook.$omit());\n        vm.saveProperties = saveProperties;\n        vm.close = close;\n\n        function saveProperties() {\n          vm.addressbook.$save().then(function() {\n            // Refresh list instance\n            srcAddressBook.init(vm.addressbook.$omit());\n            $mdDialog.hide();\n          }, function() {\n            // TODO handle error\n          });\n        }\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function share(addressbook) {\n      // Fetch list of ACL users\n      addressbook.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: addressbook.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: addressbook.$acl.users,\n            User: User,\n            folder: addressbook\n          }\n        });\n      });\n    }\n\n    /**\n     * subscribeToFolder - Callback of sgSubscribe directive\n     */\n    function subscribeToFolder(addressbookData) {\n      console.debug('subscribeToFolder ' + addressbookData.owner + addressbookData.name);\n      AddressBook.$subscribe(addressbookData.owner, addressbookData.name).then(function(data) {\n         $mdToast.show(\n           $mdToast.simple()\n             .content(l('Successfully subscribed to address book'))\n             .position('top right')\n             .hideDelay(3000));\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBooksController', AddressBooksController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * Controller to view and edit a card\n   * @ngInject\n   */\n  CardController.$inject = ['$scope', '$timeout', '$window', '$mdDialog', 'AddressBook', 'Card', 'Dialog', 'sgFocus', '$state', '$stateParams', 'stateCard'];\n  function CardController($scope, $timeout, $window, $mdDialog, AddressBook, Card, Dialog, focus, $state, $stateParams, stateCard) {\n    var vm = this;\n\n    vm.card = stateCard;\n\n    vm.currentFolder = AddressBook.selectedFolder;\n    vm.allEmailTypes = Card.$EMAIL_TYPES;\n    vm.allTelTypes = Card.$TEL_TYPES;\n    vm.allUrlTypes = Card.$URL_TYPES;\n    vm.allAddressTypes = Card.$ADDRESS_TYPES;\n    vm.categories = {};\n    vm.userFilterResults = [];\n    vm.transformCategory = transformCategory;\n    vm.addOrgUnit = addOrgUnit;\n    vm.addBirthday = addBirthday;\n    vm.addScreenName = addScreenName;\n    vm.addEmail = addEmail;\n    vm.addPhone = addPhone;\n    vm.addUrl = addUrl;\n    vm.addAddress = addAddress;\n    vm.addMember = addMember;\n    vm.userFilter = userFilter;\n    vm.save = save;\n    vm.close = close;\n    vm.reset = reset;\n    vm.cancel = cancel;\n    vm.confirmDelete = confirmDelete;\n    vm.exportCard = exportCard;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n    function transformCategory(input) {\n      if (angular.isString(input))\n        return { value: input };\n      else\n        return input;\n    }\n    function addOrgUnit() {\n      var i = vm.card.$addOrgUnit('');\n      focus('orgUnit_' + i);\n    }\n    function addBirthday() {\n      vm.card.birthday = new Date();\n    }\n    function addScreenName() {\n      vm.card.$addScreenName('');\n    }\n    function addEmail() {\n      var i = vm.card.$addEmail('');\n      focus('email_' + i);\n    }\n    function addPhone() {\n      var i = vm.card.$addPhone('');\n      focus('phone_' + i);\n    }\n    function addUrl() {\n      var i = vm.card.$addUrl('', '');\n      focus('url_' + i);\n    }\n    function addAddress() {\n      var i = vm.card.$addAddress('', '', '', '', '', '', '', '');\n      focus('address_' + i);\n    }\n    function addMember() {\n      var i = vm.card.$addMember('');\n      focus('ref_' + i);\n    }\n    function userFilter($query, excludedCards) {\n      AddressBook.selectedFolder.$filter($query, {dry: true, excludeLists: true}, excludedCards);\n      return AddressBook.selectedFolder.$cards;\n    }\n    function save(form) {\n      if (form.$valid) {\n        vm.card.$save()\n          .then(function(data) {\n            var i = _.indexOf(_.pluck(AddressBook.selectedFolder.cards, 'id'), vm.card.id);\n            if (i < 0) {\n              // New card; reload contacts list and show addressbook in which the card has been created\n              AddressBook.selectedFolder.$reload();\n            }\n            else {\n              // Update contacts list with new version of the Card object\n              AddressBook.selectedFolder.cards[i] = angular.copy(vm.card);\n            }\n            $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n          });\n      }\n    }\n    function close() {\n      $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id }).then(function() {\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n      });\n    }\n    function reset() {\n      vm.card.$reset();\n    }\n    function cancel() {\n      vm.card.$reset();\n      if (vm.card.isNew) {\n        // Cancelling the creation of a card\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n        $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n      }\n      else {\n        // Cancelling the edition of an existing card\n        $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n      }\n    }\n    function confirmDelete(card) {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the card of %{0}?', card.$fullname()),\n                     {ok: l('Yes'), cancel: l('No')})\n        .then(function() {\n          // User confirmed the deletion\n          card.$delete()\n            .then(function() {\n              // Remove card from addressbook\n              AddressBook.selectedFolder.cards = _.reject(AddressBook.selectedFolder.cards, function(o) {\n                return o.id == card.id;\n              });\n              close();\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), l('An error occured while deleting the card \"%{0}\".',\n                                           card.$fullname()));\n            });\n        });\n    }\n\n    function exportCard() {\n      $window.location.href = ApplicationBaseURL + '/' + vm.currentFolder.id + '/export?uid=' + vm.card.id;\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Card.$$resource.post(vm.currentFolder.id + '/' + vm.card.id, \"raw\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('CardController', CardController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name sgAddress\n   * @memberof ContactsUI\n   * @desc Directive to format a postal address.\n   * @ngInject\n   */\n  function sgAddress() {\n    return {\n      restrict: 'A',\n      scope: { data: '=sgAddress' },\n      controller: ['$scope', function($scope) {\n        $scope.addressLines = function(data) {\n          var lines = [],\n              locality_region = [];\n          if (data.street) lines.push(data.street);\n          if (data.street2) lines.push(data.street2);\n          if (data.locality) locality_region.push(data.locality);\n          if (data.region) locality_region.push(data.region);\n          if (locality_region.length > 0) lines.push(locality_region.join(', '));\n          if (data.country) lines.push(data.country);\n          if (data.postalcode) lines.push(data.postalcode);\n          return lines.join('<br>');\n        };\n      }],\n      template: '<address ng-bind-html=\"addressLines(data)\"></address>'\n    };\n  }\n  \n  angular\n    .module('SOGo.Common')\n    .directive('sgAddress', sgAddress);\n})();\n"]}