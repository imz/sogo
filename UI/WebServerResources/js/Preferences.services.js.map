{"version":3,"sources":["Preferences/Preferences.service.js"],"names":["Preferences","_this","this","defaults","settings","defaultsPromise","$$resource","fetch","then","data","labels","_","fromPairs","map","SOGoMailLabelsColors","value","key","charAt","SOGoMailAutoSave","parseInt","SOGoMailComposeFontSizeEnabled","SOGoMailComposeFontSize","window","CKEDITOR","config","fontSize_defaultLabel","addCss","Vacation","startDate","Date","startDateEnabled","endDate","endDateEnabled","autoReplyEmailAddresses","length","join","angular","isUndefined","isDefined","defaultEmailAddresses","daysBetweenResponse","Forward","forwardAddress","SOGoCalendarCategoriesColors","SOGoCalendarCategories","SOGoContactsCategories","extend","$mdDateLocaleProvider","locale","firstDayOfWeek","SOGoFirstDayOfWeek","weekNumberFormatter","weekNumber","l","msgCalendar","msgOpenCalendar","parseDate","dateString","SOGoShortDateFormat","NaN","formatDate","date","format","parseTime","timeString","SOGoTimeFormat","formatTime","settingsPromise","Calendar","PreventInvitationsWhitelist","match","exec","user","$User","uid","cn","c_email","$$image","avatar","no_404","url","$factory","$q","$timeout","$log","Settings","Gravatar","Resource","User","$gravatar","activeUser","$resourcesURL","resourcesURL","module","e","factory","prototype","ready","all","email","size","options","alternate_avatar","SOGoAlternateAvatar","SOGoGravatarEnabled","dstObject","dstAttr","$save","save","$omit","deep","preferences","whitelist","forEach","copy","toLowerCase","replace","substring","getTime","filter","split","v","$shortFormat"],"mappings":"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","file":"Preferences.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Preferences\n   * @constructor\n   */\n  function Preferences() {\n    var _this = this;\n\n    this.defaults = {};\n    this.settings = {};\n\n    this.defaultsPromise = Preferences.$$resource.fetch(\"jsonDefaults\").then(function(data) {\n      // We swap $key -> _$key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n      var labels = _.fromPairs(_.map(data.SOGoMailLabelsColors, function(value, key) {\n        if (key.charAt(0) == '$')\n          return ['_' + key, value];\n        return [key, value];\n      }));\n\n      data.SOGoMailLabelsColors = labels;\n\n      // Mail editor autosave is a number of minutes or 0 if disabled\n      data.SOGoMailAutoSave = parseInt(data.SOGoMailAutoSave) || 0;\n\n      // Specify a base font size for HTML messages when SOGoMailComposeFontSize is not zero\n      data.SOGoMailComposeFontSizeEnabled = parseInt(data.SOGoMailComposeFontSize) > 0;\n\n      if (window.CKEDITOR && data.SOGoMailComposeFontSizeEnabled) {\n        // HTML editor is enabled; set user's preferred font size\n        window.CKEDITOR.config.fontSize_defaultLabel = data.SOGoMailComposeFontSize;\n        window.CKEDITOR.addCss('.cke_editable { font-size: ' + data.SOGoMailComposeFontSize + 'px; }');\n      }\n\n      // We convert our list of autoReplyEmailAddresses/forwardAddress into a string.\n      // We also convert our date objects into real date, otherwise we'll have strings\n      // or undefined values and the md-datepicker does NOT like this.\n      if (data.Vacation) {\n        if (data.Vacation.startDate)\n          data.Vacation.startDate = new Date(parseInt(data.Vacation.startDate) * 1000);\n        else {\n          data.Vacation.startDateEnabled = 0;\n          data.Vacation.startDate = new Date();\n        }\n        if (data.Vacation.endDate)\n          data.Vacation.endDate = new Date(parseInt(data.Vacation.endDate) * 1000);\n        else {\n          data.Vacation.endDateEnabled = 0;\n          data.Vacation.endDate = new Date();\n        }\n        if (data.Vacation.autoReplyEmailAddresses && data.Vacation.autoReplyEmailAddresses.length)\n          data.Vacation.autoReplyEmailAddresses = data.Vacation.autoReplyEmailAddresses.join(\",\");\n        else\n          delete data.Vacation.autoReplyEmailAddresses;\n      } else\n        data.Vacation = {};\n\n      if (angular.isUndefined(data.Vacation.autoReplyEmailAddresses) &&\n          angular.isDefined(window.defaultEmailAddresses))\n        data.Vacation.autoReplyEmailAddresses = window.defaultEmailAddresses;\n\n      if (angular.isUndefined(data.Vacation.daysBetweenResponse))\n        data.Vacation.daysBetweenResponse = 7;\n\n      if (angular.isUndefined(data.Vacation.startDate)) {\n        data.Vacation.startDateEnabled = 0;\n        data.Vacation.startDate = new Date();\n      }\n\n      if (angular.isUndefined(data.Vacation.endDate)) {\n        data.Vacation.endDateEnabled = 0;\n        data.Vacation.endDate = new Date();\n      }\n\n      if (data.Forward && data.Forward.forwardAddress)\n        data.Forward.forwardAddress = data.Forward.forwardAddress.join(\",\");\n\n      if (angular.isUndefined(data.SOGoCalendarCategoriesColors)) {\n        data.SOGoCalendarCategoriesColors = {};\n        data.SOGoCalendarCategories = [];\n      }\n\n      if (angular.isUndefined(data.SOGoContactsCategories))\n        data.SOGoContactsCategories = [];\n\n      angular.extend(_this.defaults, data);\n\n      // Configure date locale\n      _this.$mdDateLocaleProvider = Preferences.$mdDateLocaleProvider;\n      angular.extend(_this.$mdDateLocaleProvider, data.locale);\n      _this.$mdDateLocaleProvider.firstDayOfWeek = parseInt(data.SOGoFirstDayOfWeek);\n      _this.$mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n        return l('Week %d', weekNumber);\n      };\n      _this.$mdDateLocaleProvider.msgCalendar = l('Calender');\n      _this.$mdDateLocaleProvider.msgOpenCalendar = l('Open Calendar');\n      _this.$mdDateLocaleProvider.parseDate = function(dateString) {\n        return dateString? dateString.parseDate(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatDate = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : '';\n      };\n      _this.$mdDateLocaleProvider.parseTime = function(timeString) {\n        return timeString? timeString.parseDate(_this.$mdDateLocaleProvider, data.SOGoTimeFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatTime = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoTimeFormat) : '';\n      };\n\n      return _this.defaults;\n    });\n\n    this.settingsPromise = Preferences.$$resource.fetch(\"jsonSettings\").then(function(data) {\n      // We convert our PreventInvitationsWhitelist hash into a array of user\n      if (data.Calendar) {\n        if (data.Calendar.PreventInvitationsWhitelist) {\n          data.Calendar.PreventInvitationsWhitelist = _.map(data.Calendar.PreventInvitationsWhitelist, function(value, key) {\n            var match = /^(.+)\\s<(\\S+)>$/.exec(value),\n                user = new Preferences.$User({uid: key, cn: match[1], c_email: match[2]});\n            if (!user.$$image)\n              _this.avatar(user.c_email, 32, {no_404: true}).then(function(url) {\n                user.$$image = url;\n              });\n            return user;\n          });\n        }\n        else\n          data.Calendar.PreventInvitationsWhitelist = [];\n      }\n\n      angular.extend(_this.settings, data);\n\n      return _this.settings;\n    });\n  }\n\n  /**\n   * @memberof Preferences\n   * @desc The factory we'll use to register with Angular\n   * @returns the Preferences constructor\n   */\n  Preferences.$factory = ['$q', '$timeout', '$log', '$mdDateLocale', 'sgSettings', 'Gravatar', 'Resource', 'User', function($q, $timeout, $log, $mdDateLocaleProvider, Settings, Gravatar, Resource, User) {\n    angular.extend(Preferences, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $mdDateLocaleProvider: $mdDateLocaleProvider,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL'), Settings.activeUser()),\n      $resourcesURL: Settings.resourcesURL(),\n      $User: User\n    });\n\n    return new Preferences(); // return unique instance\n  }];\n\n  /* Initialize module if necessary */\n  try {\n    angular.module('SOGo.PreferencesUI');\n  }\n  catch(e) {\n    angular.module('SOGo.PreferencesUI', ['SOGo.Common']);\n  }\n\n  /* Factory registration in Angular module */\n  angular.module('SOGo.PreferencesUI')\n    .factory('Preferences', Preferences.$factory);\n\n  /**\n   * @function ready\n   * @memberof Preferences.prototype\n   * @desc Combine promises used to load user's defaults and settings.\n   * @return a combined promise\n   */\n  Preferences.prototype.ready = function() {\n    return Preferences.$q.all([this.defaultsPromise, this.settingsPromise]);\n  };\n\n  /**\n   * @function avatar\n   * @memberof Preferences.prototype\n   * @desc Get the avatar URL associated to an email address\n   * @return a combined promise\n   */\n  Preferences.prototype.avatar = function(email, size, options) {\n    var _this = this;\n    return this.ready().then(function() {\n      var alternate_avatar = _this.defaults.SOGoAlternateAvatar, url;\n      if (_this.defaults.SOGoGravatarEnabled)\n        url = Preferences.$gravatar(email, size, alternate_avatar, options);\n      else\n        url = [Preferences.$resourcesURL, 'img', 'ic_person_grey_24px.svg'].join('/');\n      if (options && options.dstObject && options.dstAttr)\n        options.dstObject[options.dstAttr] = url;\n      return url;\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Preferences.prototype\n   * @desc Save the preferences to the server.\n   */\n  Preferences.prototype.$save = function() {\n    var _this = this;\n\n    return Preferences.$$resource.save(\"Preferences\", this.$omit(true))\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        //_this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Preferences.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {Boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Preferences instance\n   */\n  Preferences.prototype.$omit = function(deep) {\n    var preferences, labels, whitelist;\n\n    preferences = {};\n    whitelist = {};\n\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          preferences[key] = angular.copy(value);\n        else\n          preferences[key] = value;\n      }\n    });\n\n    // We swap _$key -> $key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n    labels = _.fromPairs(_.map(preferences.defaults.SOGoMailLabelsColors, function(value, key) {\n      if (key.charAt(0) == '_' && key.charAt(1) == '$') {\n        // New key, let's take the value and flatten it\n        if (key.length > 2 && key.charAt(2) == '$') {\n          return [value[0].toLowerCase().replace(/[ \\(\\)\\/\\{%\\*<>\\\\\\\"]/g, \"_\"), value];\n        }\n        return [key.substring(1), value];\n      }\n      return [key, value];\n    }));\n\n    preferences.defaults.SOGoMailLabelsColors = labels;\n\n    if (!preferences.defaults.SOGoMailComposeFontSizeEnabled)\n      preferences.defaults.SOGoMailComposeFontSize = 0;\n    delete preferences.defaults.SOGoMailComposeFontSizeEnabled;\n\n    if (preferences.defaults.Vacation) {\n      if (preferences.defaults.Vacation.startDateEnabled)\n        preferences.defaults.Vacation.startDate = preferences.defaults.Vacation.startDate.getTime()/1000;\n      else\n        preferences.defaults.Vacation.startDate = 0;\n      if (preferences.defaults.Vacation.endDateEnabled)\n        preferences.defaults.Vacation.endDate = preferences.defaults.Vacation.endDate.getTime()/1000;\n      else\n        preferences.defaults.Vacation.endDate = 0;\n\n      if (preferences.defaults.Vacation.autoReplyEmailAddresses)\n        preferences.defaults.Vacation.autoReplyEmailAddresses = _.filter(preferences.defaults.Vacation.autoReplyEmailAddresses.split(\",\"), function(v) { return v.length; });\n      else\n        preferences.defaults.Vacation.autoReplyEmailAddresses = [];\n    }\n\n    if (preferences.defaults.Forward && preferences.defaults.Forward.forwardAddress)\n      preferences.defaults.Forward.forwardAddress = preferences.defaults.Forward.forwardAddress.split(\",\");\n\n    if (preferences.settings.Calendar && preferences.settings.Calendar.PreventInvitationsWhitelist) {\n      _.forEach(preferences.settings.Calendar.PreventInvitationsWhitelist, function(user) {\n        whitelist[user.uid] = user.$shortFormat();\n      });\n      preferences.settings.Calendar.PreventInvitationsWhitelist = whitelist;\n    }\n\n    return preferences;\n  };\n\n})();\n"]}