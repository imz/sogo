{"version":3,"sources":["Preferences/Preferences.service.js"],"names":["Preferences","_this","this","defaults","settings","defaultsPromise","$$resource","fetch","then","data","labels","_","zipObject","map","SOGoMailLabelsColors","value","key","charAt","SOGoMailAutoSave","parseInt","SOGoMailComposeFontSizeEnabled","SOGoMailComposeFontSize","window","CKEDITOR","config","fontSize_defaultLabel","addCss","Vacation","endDate","Date","endDateEnabled","autoReplyEmailAddresses","length","join","angular","isUndefined","isDefined","defaultEmailAddresses","daysBetweenResponse","Forward","forwardAddress","SOGoCalendarCategoriesColors","SOGoCalendarCategories","SOGoContactsCategories","extend","$mdDateLocaleProvider","locale","firstDayOfWeek","SOGoFirstDayOfWeek","weekNumberFormatter","weekNumber","l","msgCalendar","msgOpenCalendar","parseDate","dateString","SOGoShortDateFormat","NaN","formatDate","date","format","formatTime","SOGoTimeFormat","settingsPromise","Calendar","PreventInvitationsWhitelist","match","exec","$User","uid","cn","c_email","$factory","$q","$timeout","$log","Settings","Resource","User","activeUser","module","e","factory","prototype","ready","all","$save","save","$omit","deep","preferences","whitelist","forEach","copy","toLowerCase","replace","substring","getTime","filter","split","v","user","$shortFormat"],"mappings":"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","file":"Preferences.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Preferences\n   * @constructor\n   */\n  function Preferences() {\n    var _this = this;\n\n    this.defaults = {};\n    this.settings = {};\n\n    this.defaultsPromise = Preferences.$$resource.fetch(\"jsonDefaults\").then(function(data) {\n      // We swap $key -> _$key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n      var labels = _.zipObject(_.map(data.SOGoMailLabelsColors, function(value, key) {\n        if (key.charAt(0) == '$')\n          return ['_' + key, value];\n        return [key, value];\n      }));\n\n      data.SOGoMailLabelsColors = labels;\n\n      // Mail editor autosave is a number of minutes or 0 if disabled\n      data.SOGoMailAutoSave = parseInt(data.SOGoMailAutoSave) || 0;\n\n      // Specify a base font size for HTML messages when SOGoMailComposeFontSize is not zero\n      data.SOGoMailComposeFontSizeEnabled = parseInt(data.SOGoMailComposeFontSize) > 0;\n\n      if (window.CKEDITOR && data.SOGoMailComposeFontSizeEnabled) {\n        // HTML editor is enabled; set user's preferred font size\n        window.CKEDITOR.config.fontSize_defaultLabel = data.SOGoMailComposeFontSize;\n        window.CKEDITOR.addCss('.cke_editable { font-size: ' + data.SOGoMailComposeFontSize + 'px; }');\n      }\n\n      // We convert our list of autoReplyEmailAddresses/forwardAddress into a string.\n      // We also convert our date objects into real date, otherwise we'll have strings\n      // or undefined values and the md-datepicker does NOT like this.\n      if (data.Vacation) {\n        if (data.Vacation.endDate)\n          data.Vacation.endDate = new Date(parseInt(data.Vacation.endDate) * 1000);\n        else {\n          data.Vacation.endDateEnabled = 0;\n          data.Vacation.endDate = new Date();\n        }\n        if (data.Vacation.autoReplyEmailAddresses && data.Vacation.autoReplyEmailAddresses.length)\n          data.Vacation.autoReplyEmailAddresses = data.Vacation.autoReplyEmailAddresses.join(\",\");\n        else\n          delete data.Vacation.autoReplyEmailAddresses;\n      } else\n        data.Vacation = {};\n\n      if (angular.isUndefined(data.Vacation.autoReplyEmailAddresses) &&\n          angular.isDefined(window.defaultEmailAddresses))\n        data.Vacation.autoReplyEmailAddresses = window.defaultEmailAddresses;\n\n      if (angular.isUndefined(data.Vacation.daysBetweenResponse))\n        data.Vacation.daysBetweenResponse = 7;\n\n      if (angular.isUndefined(data.Vacation.endDate)) {\n        data.Vacation.endDateEnabled = 0;\n        data.Vacation.endDate = new Date();\n      }\n\n      if (data.Forward && data.Forward.forwardAddress)\n        data.Forward.forwardAddress = data.Forward.forwardAddress.join(\",\");\n\n      if (angular.isUndefined(data.SOGoCalendarCategoriesColors)) {\n        data.SOGoCalendarCategoriesColors = {};\n        data.SOGoCalendarCategories = [];\n      }\n\n      if (angular.isUndefined(data.SOGoContactsCategories))\n        data.SOGoContactsCategories = [];\n\n      angular.extend(_this.defaults, data);\n\n      // Configure date locale\n      _this.$mdDateLocaleProvider = Preferences.$mdDateLocaleProvider;\n      angular.extend(_this.$mdDateLocaleProvider, data.locale);\n      _this.$mdDateLocaleProvider.firstDayOfWeek = parseInt(data.SOGoFirstDayOfWeek);\n      _this.$mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n        return l('Week %d', weekNumber);\n      };\n      _this.$mdDateLocaleProvider.msgCalendar = l('Calender');\n      _this.$mdDateLocaleProvider.msgOpenCalendar = l('Open Calendar');\n      _this.$mdDateLocaleProvider.parseDate = function(dateString) {\n        return dateString? dateString.parseDate(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatDate = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : '';\n      };\n      _this.$mdDateLocaleProvider.formatTime = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoTimeFormat) : '';\n      };\n\n      return _this.defaults;\n    });\n\n    this.settingsPromise = Preferences.$$resource.fetch(\"jsonSettings\").then(function(data) {\n      // We convert our PreventInvitationsWhitelist hash into a array of user\n      if (data.Calendar) {\n        if (data.Calendar.PreventInvitationsWhitelist)\n          data.Calendar.PreventInvitationsWhitelist = _.map(data.Calendar.PreventInvitationsWhitelist, function(value, key) {\n            var match = /^(.+)\\s<(\\S+)>$/.exec(value);\n            return new Preferences.$User({uid: key, cn: match[1], c_email: match[2]});\n          });\n        else\n          data.Calendar.PreventInvitationsWhitelist = [];\n      }\n\n      angular.extend(_this.settings, data);\n\n      return _this.settings;\n    });\n  }\n\n  /**\n   * @memberof Preferences\n   * @desc The factory we'll use to register with Angular\n   * @returns the Preferences constructor\n   */\n  Preferences.$factory = ['$q', '$timeout', '$log', '$mdDateLocale', 'sgSettings', 'Resource', 'User', function($q, $timeout, $log, $mdDateLocaleProvider, Settings, Resource, User) {\n    angular.extend(Preferences, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $mdDateLocaleProvider: $mdDateLocaleProvider,\n      $$resource: new Resource(Settings.activeUser('folderURL'), Settings.activeUser()),\n      activeUser: Settings.activeUser(),\n      $User: User\n    });\n\n    return new Preferences(); // return unique instance\n  }];\n\n  /* Initialize module if necessary */\n  try {\n    angular.module('SOGo.PreferencesUI');\n  }\n  catch(e) {\n    angular.module('SOGo.PreferencesUI', ['SOGo.Common']);\n  }\n\n  /* Factory registration in Angular module */\n  angular.module('SOGo.PreferencesUI')\n    .factory('Preferences', Preferences.$factory);\n\n  /**\n   * @function ready\n   * @memberof Preferences.prototype\n   * @desc Combine promises used to load user's defaults and settings.\n   * @return a combined promise\n   */\n  Preferences.prototype.ready = function() {\n    return Preferences.$q.all([this.defaultsPromise, this.settingsPromise]);\n  };\n\n  /**\n   * @function $save\n   * @memberof Preferences.prototype\n   * @desc Save the preferences to the server.\n   */\n  Preferences.prototype.$save = function() {\n    var _this = this;\n\n    return Preferences.$$resource.save(\"Preferences\", this.$omit(true))\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        //_this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Preferences.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {Boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Preferences instance\n   */\n  Preferences.prototype.$omit = function(deep) {\n    var preferences, labels, whitelist;\n\n    preferences = {};\n    whitelist = {};\n\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          preferences[key] = angular.copy(value);\n        else\n          preferences[key] = value;\n      }\n    });\n\n    // We swap _$key -> $key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n    labels = _.zipObject(_.map(preferences.defaults.SOGoMailLabelsColors, function(value, key) {\n      if (key.charAt(0) == '_' && key.charAt(1) == '$') {\n        // New key, let's take the value and flatten it\n        if (key.length > 2 && key.charAt(2) == '$') {\n          return [value[0].toLowerCase().replace(/[ \\(\\)\\/\\{%\\*<>\\\\\\\"]/g, \"_\"), value];\n        }\n        return [key.substring(1), value];\n      }\n      return [key, value];\n    }));\n\n    preferences.defaults.SOGoMailLabelsColors = labels;\n\n    if (!preferences.defaults.SOGoMailComposeFontSizeEnabled)\n      preferences.defaults.SOGoMailComposeFontSize = 0;\n    delete preferences.defaults.SOGoMailComposeFontSizeEnabled;\n\n    if (preferences.defaults.Vacation) {\n      if (preferences.defaults.Vacation.endDateEnabled)\n        preferences.defaults.Vacation.endDate = preferences.defaults.Vacation.endDate.getTime()/1000;\n      else\n        preferences.defaults.Vacation.endDate = 0;\n\n      if (preferences.defaults.Vacation.autoReplyEmailAddresses)\n        preferences.defaults.Vacation.autoReplyEmailAddresses = _.filter(preferences.defaults.Vacation.autoReplyEmailAddresses.split(\",\"), function(v) { return v.length; });\n      else\n        preferences.defaults.Vacation.autoReplyEmailAddresses = [];\n    }\n\n    if (preferences.defaults.Forward && preferences.defaults.Forward.forwardAddress)\n      preferences.defaults.Forward.forwardAddress = preferences.defaults.Forward.forwardAddress.split(\",\");\n\n    if (preferences.settings.Calendar && preferences.settings.Calendar.PreventInvitationsWhitelist) {\n      _.forEach(preferences.settings.Calendar.PreventInvitationsWhitelist, function(user) {\n        whitelist[user.uid] = user.$shortFormat();\n      });\n      preferences.settings.Calendar.PreventInvitationsWhitelist = whitelist;\n    }\n\n    return preferences;\n  };\n\n})();\n"]}