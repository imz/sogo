{"version":3,"sources":["Scheduler/Scheduler.app.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","views","calendars","templateUrl","controller","controllerAs","resolve","stateCalendars","calendarView","$stateParams","view","day","stateEventsBlocks","when","now","Date","getDayString","otherwise","Calendar","$calendars","$findAll","window","calendarsData","Component","$eventsBlocksForView","asDate","then","_","forEach","id","calendar","name","calendarName","runBlock","$rootScope","$log","$location","$state","Preferences","$on","event","toState","toParams","fromState","fromParams","error","go","current","previous","rejection","length","ready","exec","settings","View","replace","angular","module","config","run","$inject"],"mappings":"CAGA,WACE,YAUA,SAASA,GAAUC,EAAgBC,GACjCD,EACGE,MAAM,aACLC,IAAK,YACLC,OACEC,WACEC,YAAa,iBACbC,WAAY,sBACZC,aAAc,QAGlBC,SACEC,eAAgBA,KAGnBR,MAAM,kBACLC,IAAK,iDAGLC,OACEO,cACEL,YAAa,SAASM,GAKpB,MAAOA,GAAaC,KAAO,YAAcD,EAAaE,KAExDP,WAAY,qBACZC,aAAc,aAGlBC,SACEM,kBAAmBA,KAIzBd,EAAmBe,KAAK,gBAAiB,WAEvC,GAAIC,GAAM,GAAIC,KACd,OAAO,iBAAmBD,EAAIE,iBAEhClB,EAAmBe,KAAK,2BAA4B,WAElD,GAAIC,GAAM,GAAIC,KACd,OAAO,4BAA8BD,EAAIE,iBAE3ClB,EAAmBe,KAAK,iBAAkB,WAExC,GAAIC,GAAM,GAAIC,KACd,OAAO,kBAAoBD,EAAIE,iBAEjClB,EAAmBe,KAAK,kBAAmB,WAEzC,GAAIC,GAAM,GAAIC,KACd,OAAO,mBAAqBD,EAAIE,iBAKlClB,EAAmBmB,UAAU,aAO/B,QAASV,GAAeW,GACtB,MAAOA,GAASC,YAAcD,EAASE,SAASC,OAAOC,eAOzD,QAASV,GAAkBH,EAAcc,EAAWL,GAElD,MAAOK,GAAUC,qBAAqBf,EAAaC,KAAMD,EAAaE,IAAIc,UACvEC,KAAK,SAASzB,GAQb,MAPA0B,GAAEC,QAAQ3B,EAAO,SAASS,GACpBA,EAAKmB,KAGPnB,EAAKoB,SAAW,GAAIZ,IAAWW,GAAInB,EAAKmB,GAAIE,KAAMrB,EAAKsB,kBAGpD/B,IAQb,QAASgC,GAASC,EAAYC,EAAMC,EAAWC,EAAQC,GACrDJ,EAAWK,IAAI,oBAAqB,SAASC,EAAOC,EAASC,EAAUC,EAAWC,EAAYC,GAC5FV,EAAKU,MAAMA,GACXR,EAAOS,GAAG,cAEZZ,EAAWK,IAAI,oBAAqB,SAASC,EAAOO,EAASC,EAAUC,GACrEd,EAAKU,MAAML,EAAOO,EAASC,EAAUC,KAER,IAA3Bb,EAAUpC,MAAMkD,QAElBZ,EAAYa,QAAQzB,KAAK,WACvB,GAAI1B,GAAM,aACNU,EAAO,WAAW0C,KAAKd,EAAYe,SAASnC,SAASoC,KAEvDtD,IADEU,EACKA,EAAK,GAEL,OACT0B,EAAUmB,UAAUvD,IAAIA,KAvH9BwD,QAAQC,OAAO,oBAAqB,YAAa,oBAAqB,cAAe,qBAAsB,kBAAmB,kBAC3HC,OAAO9D,GACP+D,IAAI1B,GAKPrC,EAAUgE,SAAW,iBAAkB,sBAmEvCrD,EAAeqD,SAAW,YAQ1BhD,EAAkBgD,SAAW,eAAgB,YAAa,YAmB1D3B,EAAS2B,SAAW,aAAc,OAAQ,YAAa,SAAU","file":"Scheduler.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGo.SchedulerUI module */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.SchedulerUI', ['ui.router', 'angularFileUpload', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.ContactsUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('calendars', {\n        url: '/calendar',\n        views: {\n          calendars: {\n            templateUrl: 'UIxCalMainView', // UI/Templates/SchedulerUI/UIxCalMainView.wox\n            controller: 'CalendarsController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateCalendars: stateCalendars\n        }\n      })\n      .state('calendars.view', {\n        url: '/{view:(?:day|week|month|multicolumnday)}/:day',\n        //sticky: true,\n        //deepStateRedirect: true,\n        views: {\n          calendarView: {\n            templateUrl: function($stateParams) {\n              // UI/Templates/SchedulerUI/UIxCalDayView.wox or\n              // UI/Templates/SchedulerUI/UIxCalWeekView.wox or\n              // UI/Templates/SchedulerUI/UIxCalMonthView.wox or\n              // UI/Templates/SchedulerUI/UIxCalMulticolumnDayView.wox\n              return $stateParams.view + 'view?day=' + $stateParams.day;\n            },\n            controller: 'CalendarController',\n            controllerAs: 'calendar'\n          }\n        },\n        resolve: {\n          stateEventsBlocks: stateEventsBlocks\n        }\n      });\n\n    $urlRouterProvider.when('/calendar/day', function() {\n      // If no date is specified, show today\n      var now = new Date();\n      return '/calendar/day/' + now.getDayString();\n    });\n    $urlRouterProvider.when('/calendar/multicolumnday', function() {\n      // If no date is specified, show today\n      var now = new Date();\n      return '/calendar/multicolumnday/' + now.getDayString();\n    });\n    $urlRouterProvider.when('/calendar/week', function() {\n      // If no date is specified, show today's week\n      var now = new Date();\n      return '/calendar/week/' + now.getDayString();\n    });\n    $urlRouterProvider.when('/calendar/month', function() {\n      // If no date is specified, show today's month\n      var now = new Date();\n      return '/calendar/month/' + now.getDayString();\n    });\n\n    // If none of the above states are matched, use this as the fallback.\n    // runBlock will also act as a fallback by looking at user's settings\n    $urlRouterProvider.otherwise('/calendar');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCalendars.$inject = ['Calendar'];\n  function stateCalendars(Calendar) {\n    return Calendar.$calendars || Calendar.$findAll(window.calendarsData);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateEventsBlocks.$inject = ['$stateParams', 'Component', 'Calendar'];\n  function stateEventsBlocks($stateParams, Component, Calendar) {\n    // See CalendarController.js\n    return Component.$eventsBlocksForView($stateParams.view, $stateParams.day.asDate())\n      .then(function(views) {\n        _.forEach(views, function(view) {\n          if (view.id) {\n            // Note: this can't be done in Component service since it would make Component dependent on\n            // the Calendar service and create a circular dependency\n            view.calendar = new Calendar({ id: view.id, name: view.calendarName });\n          }\n        });\n        return views;\n      });\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$location', '$state', 'Preferences'];\n  function runBlock($rootScope, $log, $location, $state, Preferences) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('calendar');\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n    if ($location.url().length === 0) {\n      // Restore user's last view\n      Preferences.ready().then(function() {\n        var url = '/calendar/',\n            view = /(.+)view/.exec(Preferences.settings.Calendar.View);\n        if (view)\n          url += view[1];\n        else\n          url += 'week';\n        $location.replace().url(url);\n      });\n    }\n  }\n\n})();\n"]}