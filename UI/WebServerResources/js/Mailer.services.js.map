{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","$accounts","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","$getMailboxes","options","_this","$mailboxes","reload","$find","$expanded","ready","expandedFolders","_visit","mailboxes","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","when","allMailboxes","push","all","$$flattenMailboxes","saveState","account","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","$isNoInferiors","isNoInferiors","isUndefined","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedMessages","filter","selected","$selectedCount","isSelectedMessage","messageId","selectedMessage","hasSelectedMessage","isDefined","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","messages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","download","exportFolder","$delete","remove","$_deleteMessages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","response","error","$futureMailboxData","headers","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Message_STATUS","STATUS","$avatar","avatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","NOT_LOADED","DELAYED_LOADING","LOADING","LOADED","DELAYED_MS","filterTags","query","excludedTags","re","RegExp","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","$setUID","oldUID","attr","constructor","shortname","first","last","replace","image","$shortRecipients","result","count","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$loaded","useCache","$futureMessageData","$reply","$newDraft","$replyAll","$forward","origin","$send","startsWith","isanswered","isforwarded","privateAttributes","saveMessage","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","transform","messagesMap","sum","allMessages","promises","assign","flatten","MailboxController","$window","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","focus","Dialog","field","vm","sortedBy","searchMode","mode","cancelSearch","newMessage","$event","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","stateRecipients","selectMessage","go","mailboxId","toggleMessageSelection","multiple","preventDefault","stopPropagation","_currentMailboxes","_unselectMessage","nextMessage","previousMessage","nextIndex","console","warn","confirmDeleteSelectedMessages","confirm","ok","deleteSelectedMessage","size","markOrUnMarkMessagesAsJunk","moveSelectedMessage","dstFolder","copySelectedMessages","moveSelectedMessages","selectAll","unselectMessages","markSelectedMessagesAsFlagged","markSelectedMessagesAsUnread","$mailboxController","service","accounts","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdToast","$mdMedia","$mdSidenav","sgConstant","User","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","toggleAccountState","triggerHandler","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","simple","position","hideDelay","emptyTrashFolder","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","window","","MessageController","sgSettings","Calendar","Component","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","deleteMessage","state","parentCtrls","closePopup","showMailEditor","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","$watch","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","semicolon","autocomplete","hideCc","hideBcc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode","event","on"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    Account.$accounts = collection;\n\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$expanded = false;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            _this.$expanded = (expandedFolders.indexOf('/' + _this.id) >= 0);\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          if (Account.$accounts)\n            _this.$expanded |= (Account.$accounts.length == 1); // Always expand single account\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - the following boolean attributes are available:\n   *   - reload: rebuild the flatten array of mailboxes from the original tree representation (this.$mailboxes)\n   *   - all: return all mailboxes, ignoring their expanstion state\n   *   - saveState: save expansion state of mailboxes to the server\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          // Save expansion state of mailboxes to the server\n          _.forEach(Account.$accounts, function(account) {\n            if (account.$expanded) {\n              expandedMailboxes.push('/' + account.id);\n            }\n            _.reduce(account.$$flattenMailboxes, function(expandedFolders, mailbox) {\n              if (mailbox.$expanded) {\n                expandedFolders.push('/' + mailbox.id);\n              }\n              return expandedFolders;\n            }, expandedMailboxes);\n          });\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Return the messages selected by the user.\n   * @returns Message instances\n   */\n  Mailbox.prototype.$selectedMessages = function() {\n    return _.filter(this.$messages, function(message) { return message.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    return this.$selectedMessages().length;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(messages, flags, operation) {\n    var data = {msgUIDs: _.map(messages, 'uid'),\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data).then(function() {\n      return messages;\n    });\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    return Mailbox.$$resource.download(this.id, 'exportFolder');\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this,\n        uids = _.map(messages, 'uid'),\n        method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(messages, folder) {\n    var _this = this,\n        uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(response) {\n      Mailbox.$log.error(JSON.stringify(response.data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    return { name: this.name };\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgMessage_STATUS', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Message_STATUS, Resource, Preferences) {\n    angular.extend(Message, {\n      STATUS: Message_STATUS,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $avatar: angular.bind(Preferences, Preferences.avatar)\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMessage_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates the avatar URL for each email address and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" or \"Foo, Alice\" as name, we grab \"Alice\"\n            data.shortname = _.first(_.last(data.name.split(/, */)).split(/ +/)).replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        data.image = Message.$avatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Message.prototype\n   * @returns true if the Message content is still being retrieved from server after a specific delay\n   * @see sgMessage_STATUS\n   */\n  Message.prototype.$isLoading = function() {\n    return this.$loaded == Message.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @param {object} [options] - set {useCache: true} to use already fetched data\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var _this = this, futureMessageData;\n\n    if (options && options.useCache && this.$futureMessageData) {\n      if (!this.isread) {\n        Message.$$resource.fetch(this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return this;\n    }\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return data;\n      }\n      else {\n        return Message.$q.reject(data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Message is not loaded yet\n    this.$loaded = Message.STATUS.DELAYED_LOADING;\n    Message.$timeout(function() {\n      if (_this.$loaded != Message.STATUS.LOADED)\n        _this.$loaded = Message.STATUS.LOADING;\n    }, Message.STATUS.DELAYED_MS);\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        _this.$loaded = Message.STATUS.LOADED;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function saveMessage\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.saveMessage = function() {\n    var selectedUIDs;\n\n    selectedUIDs = [ this.uid ];\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Return an associative array of the selected messages for each mailbox. Keys are the mailboxes ids.\n   * @returns an associative array\n   */\n  VirtualMailbox.prototype.$selectedMessages = function() {\n    var messagesMap = {};\n    return _.transform(this.$mailboxes, function(messagesMap, mailbox) {\n      messagesMap[mailbox.id] = mailbox.$selectedMessages();\n    }, {});\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    return _.sum(_.invokeMap(this.$mailboxes, '$selectedCount'));\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @param {object} messagesMap\n   * @param {array} flags\n   * @param {string} operation\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(messagesMap, flags, operation) {\n    var data = {\n      flags: flags,\n      operation: operation\n    };\n    var allMessages = [];\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var uids = _.map(messages, 'uid');\n        allMessages.push(messages);\n        var promise = VirtualMailbox.$$resource.post(id, 'addOrRemoveLabel', _.assign(data, {msgUIDs: uids}));\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises).then(function() {\n      return _.flatten(allMessages);\n    });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$deleteMessages(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof VirtualMailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$markOrUnMarkMessagesAsJunk(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$copyMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$moveMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$timeout', '$q', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $timeout, $q, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    // Expose controller\n    $window.$mailboxController = vm;\n\n    stateMailbox.selectFolder();\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.searchMode = searchMode;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.unselectMessages = unselectMessages;\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function searchMode() {\n      vm.mode.search = true;\n      focus('search');\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    /**\n     * Batch operations\n     */\n\n    function _currentMailboxes() {\n      if (Mailbox.$virtualMode)\n        return vm.selectedFolder.$mailboxes;\n      else\n        return [vm.selectedFolder];\n    }\n\n    function _unselectMessage(message, index) {\n      // Unselect current message and cleverly load the next message.\n      // This function must not be called in virtual mode.\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        // Select either the next or previous message\n        if (index > 0) {\n          nextIndex -= 1;\n          nextMessage = vm.selectedFolder.$messages[nextIndex];\n        }\n        if (index < vm.selectedFolder.$messages.length)\n          previousMessage = vm.selectedFolder.$messages[index];\n        if (nextMessage) {\n          if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n        }\n        else if (previousMessage) {\n          nextIndex = index;\n          nextMessage = previousMessage;\n        }\n        if (nextMessage) {\n          vm.selectedFolder.$topIndex = nextIndex;\n          $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n        }\n        else {\n          $state.go('mail.account.mailbox');\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n          var selectedMessages = vm.selectedFolder.$selectedMessages();\n          if (_.size(selectedMessages) > 0)\n            vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n              if (Mailbox.$virtualMode) {\n                // When performing an advanced search, we refresh the view if the selected message\n                // was deleted, but only once all promises have completed.\n                if (deleteSelectedMessage)\n                  $state.go('mail.account.virtualMailbox');\n              }\n              else {\n                // In normal mode, we immediately unselect the selected message.\n                _unselectMessage(deleteSelectedMessage, index);\n              }\n            });\n        });\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n          var dstFolder = '/' + vm.account.id + '/folderINBOX';\n          if (vm.selectedFolder.type != 'junk') {\n            dstFolder = '/' + vm.account.$getMailboxByType('junk').id;\n          }\n          vm.selectedFolder.$moveMessages(selectedMessages, dstFolder).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (moveSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(moveSelectedMessage, index);\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(dstFolder) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$copyMessages(selectedMessages, '/' + dstFolder);\n    }\n\n    function moveSelectedMessages(dstFolder) {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$moveMessages(selectedMessages, '/' + dstFolder).then(function(index) {\n          if (Mailbox.$virtualMode) {\n            // When performing an advanced search, we refresh the view if the selected message\n            // was moved, but only once all promises have completed.\n            if (moveSelectedMessage)\n              $state.go('mail.account.virtualMailbox');\n          }\n          else {\n            // In normal mode, we immediately unselect the selected message.\n            _unselectMessage(moveSelectedMessage, index);\n          }\n        });\n    }\n\n    function selectAll() {\n      var count = 0;\n      _.forEach(_currentMailboxes(), function(folder) {\n        var i = 0, length = folder.$messages.length;\n        for (; i < length; i++)\n          folder.$messages[i].selected = true;\n        count += length;\n      });\n      vm.mode.multiple = count;\n    }\n\n    function unselectMessages() {\n      _.forEach(_currentMailboxes(), function(folder) {\n        _.forEach(folder.$messages, function(message) {\n          message.selected = false;\n        });\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, '\\\\Flagged', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isflagged = true;\n          });\n        });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'remove').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isread = false;\n            message.$mailbox.unseenCount++;\n          });\n        });\n    }\n\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.toggleAccountState = toggleAccountState;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function toggleAccountState(account) {\n      account.$expanded = !account.$expanded;\n      account.$flattenMailboxes({ reload: true, saveState: true });\n      // Fire a window resize to recompute the virtual-repeater.\n      // This is a fix until the following issue is officially resolved:\n      // https://github.com/angular/material/issues/7309\n      $timeout(function() {\n        angular.element($window).triggerHandler('resize');\n      }, 150);\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'junk')\n        return {name: l('JunkFolderName'), icon: 'thumb_down'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.showFlags = true;\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch(function() { return vm.message.isflagged; }, function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (messageDialog === null) {\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this, semicolon = 186;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.recipientSeparatorKeys = [$mdConstant.KEY_CODE.ENTER, $mdConstant.KEY_CODE.TAB, $mdConstant.KEY_CODE.COMMA, semicolon];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name))\n            .position('top right')\n            .hideDelay(3000));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n        $mdDialog.hide();\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}