{"version":3,"sources":["Contacts/AddressBook.service.js","Contacts/Card.service.js"],"names":["AddressBook","futureAddressBookData","then","this","init","name","id","newAddressBookData","$$resource","create","$unwrap","acls","objectEditor","objectCreator","objectEraser","$acl","$$Acl","$factory","$q","$timeout","$log","Settings","AddressBook_PRELOAD","Resource","Card","Acl","Preferences","angular","extend","PRELOAD","activeUser","$Card","$Preferences","$query","search","value","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Contact","SortingState","parseInt","module","e","constant","LOOKAHEAD","SIZE","factory","$filterAll","options","excludedCards","params","isUndefined","$cards","fetch","response","results","card","index","compareIds","data","_","filter","contacts","find","bind","length","splice","forEach","mapKeys","key","toLowerCase","debug","when","$add","addressbook","list","sibling","i","isSubscription","$subscriptions","$addressbooks","o","localeCompare","indexOf","map","$findAll","_this","$remotes","isRemote","push","union","$subscribe","uid","path","userResource","addressbookData","prototype","$$cards","idsMap","isOwned","isSuperUser","owner","login","$id","$futureAddressBookData","getLength","getItemAtIndex","$isLoading","$lastVisibleIndex","Math","max","$loadCard","endIndex","ids","futureHeadersData","cardId","startIndex","loaded","isDefined","$loaded","STATUS","NOT_LOADED","min","LOADED","LOADING","join","post","$unwrapHeaders","isSelectedCard","selectedCard","$selectedCount","count","selected","$startRefreshTimeout","cancel","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","$reload","timeInterval","$filter","query","dry","copy","partial","addressbookId","futureData","fields","idFieldIndex","cards","headers","invokeMap","pid","oldIndex","removedCards","findIndex","zipObject","$rename","$save","$delete","promise","d","defer","remove","resolve","reject","$deleteCards","uids","differenceBy","$copyCards","folder","save","$omit","exportCards","selectedOnly","selectedUIDs","selectedCards","download","type","$topIndex","reduce","isError","isObject","j","cardHeaders","futureCardData","newCardData","newguid","isNew","$TEL_TYPES","$EMAIL_TYPES","$URL_TYPES","$ADDRESS_TYPES","Card_STATUS","SOGoContactsCategories","$categories","SOGoAlternateAvatar","$alternateAvatar","DELAYED_LOADING","DELAYED_MS","$find","$unwrapCollection","filterCategories","re","RegExp","category","collection","$futureCardData","refs","categories","c_screenname","$$fullname","$fullname","$$email","$preferredEmail","$$image","image","avatar","no_404","isgroup","c_component","c_name","empty","action","birthday","$birthday","$mdDateLocaleProvider","formatDate","$shadowData","attribute","selectedIDs","names","fn","c_cn","html","c_givenname","nickname","c_sn","c_org","emails","$description","description","title","role","orgUnits","unit","email","test","c_mail","$shortFormat","fullname","$isCard","$isList","condition","expandable","$addOrgUnit","orgUnit","$addEmail","$addScreenName","screenName","$addPhone","phones","$addUrl","url","urls","$addAddress","postoffice","street","street2","locality","region","country","postalcode","addresses","$addMember","explode","$reset","reference","dlp","parseDate","deep","format","toString","desc"],"mappings":"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","file":"Contacts.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name AddressBook\n   * @constructor\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function AddressBook(futureAddressBookData) {\n    // Data is immediately available\n    if (typeof futureAddressBookData.then !== 'function') {\n      this.init(futureAddressBookData);\n      if (this.name && !this.id) {\n        // Create a new addressbook on the server\n        var newAddressBookData = AddressBook.$$resource.create('createFolder', this.name);\n        this.$unwrap(newAddressBookData);\n        this.acls = {'objectEditor': 1, 'objectCreator': 1, 'objectEraser': 1};\n      }\n      else if (this.id) {\n        this.$acl = new AddressBook.$$Acl('Contacts/' + this.id);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureAddressBookData);\n    }\n  }\n\n  /**\n   * @memberof AddressBook\n   * @desc The factory we'll use to register with Angular\n   * @returns the AddressBook constructor\n   */\n  AddressBook.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgAddressBook_PRELOAD', 'Resource', 'Card', 'Acl', 'Preferences', function($q, $timeout, $log, Settings, AddressBook_PRELOAD, Resource, Card, Acl, Preferences) {\n    angular.extend(AddressBook, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      PRELOAD: AddressBook_PRELOAD,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $Card: Card,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: {search: 'name_or_address', value: '', sort: 'c_cn', asc: 1},\n      activeUser: Settings.activeUser(),\n      selectedFolder: null,\n      $refreshTimeout: null\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Contact.SortingState) {\n        AddressBook.$query.sort = Preferences.settings.Contact.SortingState[0];\n        AddressBook.$query.asc = parseInt(Preferences.settings.Contact.SortingState[1]);\n      }\n    });\n    return AddressBook; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of AddressBook in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common', 'SOGo.PreferencesUI']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .constant('sgAddressBook_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('AddressBook', AddressBook.$factory);\n\n  /**\n   * @memberof AddressBook\n   * @desc Search for cards among all addressbooks matching some criterias.\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (excludeGroups and excludeLists)\n   * @param {object[]} excludedCards - a list of Card objects that must be excluded from the results\n   * @returns a collection of Cards instances\n   */\n  AddressBook.$filterAll = function(search, options, excludedCards) {\n    var params = { search: search };\n\n    if (!search) {\n      // No query specified\n      AddressBook.$cards = [];\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    if (angular.isUndefined(AddressBook.$cards)) {\n      // First session query\n      AddressBook.$cards = [];\n    }\n\n    angular.extend(params, options);\n\n    return AddressBook.$$resource.fetch(null, 'allContactSearch', params).then(function(response) {\n      var results, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.contacts, function(data) {\n          return _.isUndefined(_.find(excludedCards, _.bind(compareIds, data)));\n        });\n      }\n      else {\n        results = response.contacts;\n      }\n      // Remove cards that no longer match the search query\n      for (index = AddressBook.$cards.length - 1; index >= 0; index--) {\n        card = AddressBook.$cards[index];\n        if (_.isUndefined(_.find(results, _.bind(compareIds, card)))) {\n          AddressBook.$cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.forEach(results, function(data, index) {\n        if (_.isUndefined(_.find(AddressBook.$cards, _.bind(compareIds, data)))) {\n          var card = new AddressBook.$Card(_.mapKeys(data, function(value, key) {\n            return key.toLowerCase();\n          }), search);\n          AddressBook.$cards.splice(index, 0, card);\n        }\n      });\n      AddressBook.$log.debug(AddressBook.$cards);\n      return AddressBook.$cards;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Add a new addressbook to the static list of addressbooks\n   * @param {AddressBook} addressbook - an Addressbook object instance\n   */\n  AddressBook.$add = function(addressbook) {\n    // Insert new addressbook at proper index\n    var list, sibling, i;\n\n    list = addressbook.isSubscription? this.$subscriptions : this.$addressbooks;\n    sibling = _.find(list, function(o) {\n      return (addressbook.id == 'personal' ||\n              (o.id != 'personal' &&\n               o.name.localeCompare(addressbook.name) === 1));\n    });\n    i = sibling ? _.indexOf(_.map(list, 'id'), sibling.id) : 1;\n    list.splice(i, 0, addressbook);\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Set or get the list of addressbooks. Will instantiate a new AddressBook object for each item.\n   * @param {array} [data] - the metadata of the addressbooks\n   * @returns the list of addressbooks\n   */\n  AddressBook.$findAll = function(data) {\n    var _this = this;\n    if (data) {\n      this.$addressbooks = [];\n      this.$subscriptions = [];\n      this.$remotes = [];\n      // Instanciate AddressBook objects\n      angular.forEach(data, function(o, i) {\n        var addressbook = new AddressBook(o);\n        if (addressbook.isRemote)\n          _this.$remotes.push(addressbook);\n        else if (addressbook.isSubscription)\n          _this.$subscriptions.push(addressbook);\n        else\n          _this.$addressbooks.push(addressbook);\n      });\n    }\n    return _.union(this.$addressbooks, this.$subscriptions, this.$remotes);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Subscribe to another user's addressbook and add it to the list of addressbooks.\n   * @param {string} uid - user id\n   * @param {string} path - path of folder for specified user\n   * @returns a promise of the HTTP query result\n   */\n  AddressBook.$subscribe = function(uid, path) {\n    var _this = this;\n    return AddressBook.$$resource.userResource(uid).fetch(path, 'subscribe').then(function(addressbookData) {\n      var addressbook = new AddressBook(addressbookData);\n      if (_.isUndefined(_.find(_this.$subscriptions, function(o) {\n        return o.id == addressbookData.id;\n      }))) {\n        // Not already subscribed\n        AddressBook.$add(addressbook);\n      }\n      return addressbook;\n    });\n  };\n\n  /**\n   * @function init\n   * @memberof AddressBook.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of addressbook\n   */\n  AddressBook.prototype.init = function(data, options) {\n    var _this = this;\n    if (!this.$$cards) {\n      // Array of cards for \"dry\" searches (see $filter)\n      this.$$cards = [];\n    }\n    this.idsMap = {};\n    this.$cards = []; // TODO Keep the \"selected\" state of cards\n    // Extend instance with all attributes of data except headers\n    angular.forEach(data, function(value, key) {\n      if (key != 'headers' && key != 'cards') {\n        _this[key] = value;\n      }\n    });\n    // Add 'isOwned' and 'isSubscription' attributes based on active user (TODO: add it server-side?)\n    this.isOwned = AddressBook.activeUser.isSuperUser || this.owner == AddressBook.activeUser.login;\n    this.isSubscription = !this.isRemote && this.owner != AddressBook.activeUser.login;\n  };\n\n  /**\n   * @function $id\n   * @memberof AddressBook.prototype\n   * @desc Resolve the addressbook id.\n   * @returns a promise of the addressbook id\n   */\n  AddressBook.prototype.$id = function() {\n    if (this.id) {\n      // Object already unwrapped\n      return AddressBook.$q.when(this.id);\n    }\n    else {\n      // Wait until object is unwrapped\n      return this.$futureAddressBookData.then(function(addressbook) {\n        return addressbook.id;\n      });\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof AddressBook.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of cards in the addressbook\n   */\n  AddressBook.prototype.getLength = function() {\n    return this.$cards.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof AddressBook.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the card at the specified index\n   */\n  AddressBook.prototype.getItemAtIndex = function(index) {\n    var card;\n\n    if (!this.$isLoading && index >= 0 && index < this.$cards.length) {\n      card = this.$cards[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadCard(card))\n        return card;\n    }\n    return null;\n  };\n\n  /**\n   * @function $loadCard\n   * @memberof AddressBook.prototype\n   * @desc Check if the card is loaded and in any case, fetch more cards headers from the server.\n   * @returns true if the card metadata are already fetched\n   */\n  AddressBook.prototype.$loadCard = function(card) {\n    var cardId = card.id,\n        startIndex = this.idsMap[cardId],\n        endIndex,\n        index,\n        max = this.$cards.length,\n        loaded = false,\n        ids,\n        futureHeadersData;\n\n    if (angular.isUndefined(this.ids) && card.id) {\n      loaded = true;\n    }\n    else if (angular.isDefined(startIndex) && startIndex < this.$cards.length) {\n      // Index is valid\n      if (card.$loaded != AddressBook.$Card.STATUS.NOT_LOADED) {\n        // Card headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + AddressBook.PRELOAD.LOOKAHEAD, max - 1);\n      if (this.$cards[endIndex].$loaded != AddressBook.$Card.STATUS.NOT_LOADED) {\n        index = Math.max(startIndex - AddressBook.PRELOAD.LOOKAHEAD, 0);\n        if (this.$cards[index].$loaded != AddressBook.$Card.STATUS.LOADED) {\n          // Previous cards not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - AddressBook.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next cards not load; preload more headers further down\n        endIndex = Math.min(startIndex + AddressBook.PRELOAD.SIZE, max - 1);\n\n      if (this.$cards[startIndex].$loaded == AddressBook.$Card.STATUS.NOT_LOADED ||\n          this.$cards[endIndex].$loaded == AddressBook.$Card.STATUS.NOT_LOADED) {\n\n        for (ids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (this.$cards[startIndex].$loaded != AddressBook.$Card.STATUS.NOT_LOADED) {\n            // Card at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Card at this index will be loaded\n            ids.push(this.$cards[startIndex].id);\n            this.$cards[startIndex].$loaded = AddressBook.$Card.STATUS.LOADING;\n          }\n        }\n\n        AddressBook.$log.debug('Loading Ids ' + ids.join(' ') + ' (' + ids.length + ' cards)');\n        if (ids.length > 0) {\n          futureHeadersData = AddressBook.$$resource.post(this.id, 'headers', {ids: ids});\n          this.$unwrapHeaders(futureHeadersData);\n        }\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isSelectedCard\n   * @memberof AddressBook.prototype\n   * @desc Check if the specified card is selected.\n   * @param {string} CardId\n   * @returns true if the specified card is selected\n   */\n  AddressBook.prototype.isSelectedCard = function(cardId) {\n    return this.selectedCard == cardId;\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof AddressBook.prototype\n   * @desc Return the number of cards selected by the user.\n   * @returns the number of selected cards\n   */\n  AddressBook.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$cards) {\n      count = (_.filter(this.$cards, function(card) { return card.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $startRefreshTimeout\n   * @memberof AddressBook.prototype\n   * @desc Starts the refresh timeout for the current selected address book\n   */\n  AddressBook.prototype.$startRefreshTimeout = function() {\n    var _this = this;\n\n    if (AddressBook.$refreshTimeout)\n      AddressBook.$timeout.cancel(AddressBook.$refreshTimeout);\n\n    AddressBook.$Preferences.ready().then(function() {\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = AddressBook.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, AddressBook.prototype.$reload);\n        AddressBook.$refreshTimeout = AddressBook.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof AddressBook.prototype\n   * @desc Reload list of cards\n   * @returns a promise of the Cards instances\n   */\n  AddressBook.prototype.$reload = function() {\n    var _this = this;\n\n    this.$startRefreshTimeout();\n    return this.$filter();\n  };\n\n    /**\n   * @function $filter\n   * @memberof AddressBook.prototype\n   * @desc Search for cards matching some criterias\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (dry, excludeList)\n   * @returns a collection of Cards instances\n   */\n  AddressBook.prototype.$filter = function(search, options, excludedCards) {\n    var _this = this, query,\n        dry = options && options.dry;\n\n    if (dry) {\n      // Don't keep a copy of the query in dry mode\n      query = angular.copy(AddressBook.$query);\n    }\n    else {\n      this.$isLoading = true;\n      query = AddressBook.$query;\n      if (!this.isRemote) query.partial = 1;\n    }\n\n    return AddressBook.$Preferences.ready().then(function() {\n      if (options) {\n        angular.extend(query, options);\n        if (dry) {\n          if (!search) {\n            // No query specified\n            _this.$$cards = [];\n            return AddressBook.$q.when(_this.$$cards);\n          }\n        }\n      }\n\n      if (angular.isDefined(search))\n        query.value = search;\n\n      return _this.$id().then(function(addressbookId) {\n        var futureData = AddressBook.$$resource.fetch(addressbookId, 'view', query);\n\n        if (dry) {\n          futureData.then(function(response) {\n            var results, headers, card, index, fields, idFieldIndex,\n                cards = _this.$$cards,\n                compareIds = function(card) {\n                  return this == card.id;\n                };\n\n            if (response.headers) {\n              // First entry of 'headers' are keys\n              fields = _.invokeMap(response.headers[0], 'toLowerCase');\n              idFieldIndex = fields.indexOf('id');\n              response.headers.splice(0, 1);\n            }\n\n            if (excludedCards)\n              // Remove excluded cards from results\n              results = _.filter(response.ids, function(id) {\n                return _.isUndefined(_.find(excludedCards, _.bind(compareIds, id)));\n              });\n            else\n              results = response.ids;\n\n            // Remove cards that no longer match the search query\n            for (index = cards.length - 1; index >= 0; index--) {\n              card = cards[index];\n              if (_.isUndefined(_.find(results, _.bind(compareIds, card.id)))) {\n                cards.splice(index, 1);\n              }\n            }\n\n            // Add new cards matching the search query\n            _.forEach(results, function(cardId, index) {\n              if (_.isUndefined(_.find(cards, _.bind(compareIds, cardId)))) {\n                var data = { pid: addressbookId, id: cardId };\n                var card = new AddressBook.$Card(data, search);\n                cards.splice(index, 0, card);\n              }\n            });\n\n            // Respect the order of the results\n            _.forEach(results, function(cardId, index) {\n              var oldIndex, removedCards;\n              if (cards[index].id != cardId) {\n                oldIndex = _.findIndex(cards, _.bind(compareIds, cardId));\n                removedCards = cards.splice(oldIndex, 1);\n                cards.splice(index, 0, removedCards[0]);\n              }\n            });\n\n            // Extend Card objects with received headers\n            _.forEach(response.headers, function(data) {\n              var card, index = _.findIndex(cards, _.bind(compareIds, data[idFieldIndex]));\n              if (index > -1) {\n                card = _.zipObject(fields, data);\n                cards[index].init(card, search);\n              }\n            });\n\n            _this.$isLoading = false;\n            return cards;\n          });\n        }\n        else {\n          // Unwrap promise and instantiate or extend Cards objets\n          _this.$unwrap(futureData);\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$rename = function(name) {\n    var i = _.indexOf(_.map(AddressBook.$addressbooks, 'id'), this.id);\n    this.name = name;\n    AddressBook.$addressbooks.splice(i, 1);\n    AddressBook.$add(this);\n    return this.$save();\n  };\n\n  /**\n   * @function $delete\n   * @memberof AddressBook.prototype\n   * @desc Delete the addressbook from the server and the static list of addressbooks.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$delete = function() {\n    var _this = this,\n        d = AddressBook.$q.defer(),\n        list,\n        promise;\n\n    if (this.isSubscription) {\n      promise = AddressBook.$$resource.fetch(this.id, 'unsubscribe');\n      list = AddressBook.$subscriptions;\n    }\n    else {\n      promise = AddressBook.$$resource.remove(this.id);\n      list = AddressBook.$addressbooks;\n    }\n\n    promise.then(function() {\n      var i = _.indexOf(_.map(list, 'id'), _this.id);\n      list.splice(i, 1);\n      d.resolve();\n    }, d.reject);\n    return d.promise;\n  };\n\n  /**\n   * @function $deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from addressbook.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$deleteCards = function(cards) {\n    var _this = this,\n        ids = _.map(cards, function(card) { return card.id; });\n    \n    return AddressBook.$$resource.post(this.id, 'batchDelete', {uids: ids}).then(function() {\n      _this.$cards = _.differenceBy(_this.$cards, cards, 'id');\n      _.forEach(cards, function(card) {\n        delete _this.idsMap[card.id];\n      });\n    });\n  };\n\n  /**\n   * @function $copyCards\n   * @memberof AddressBook.prototype\n   * @desc Copy multiple cards from addressbook to an other one.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$copyCards = function(cards, folder) {\n    var uids = _.map(cards, function(card) { return card.id; });\n    return AddressBook.$$resource.post(this.id, 'copy', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $save\n   * @memberof AddressBook.prototype\n   * @desc Save the addressbook to the server. This currently can only affect the name of the addressbook.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$save = function() {\n    return AddressBook.$$resource.save(this.id, this.$omit()).then(function(data) {\n      return data;\n    });\n  };\n\n  /**\n   * @function $exportCards\n   * @memberof AddressBook.prototype\n   * @desc Export the selected/all cards\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.exportCards = function(selectedOnly) {\n    var selectedUIDs;\n\n    if (selectedOnly) {\n      var selectedCards = _.filter(this.$cards, function(card) { return card.selected; });\n      selectedUIDs = _.map(selectedCards, 'id');\n    }\n\n    return AddressBook.$$resource.download(this.id, 'export', (angular.isDefined(selectedUIDs) ? {uids: selectedUIDs} : null), {type: 'application/octet-stream'});\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and instanciate new Card objects using received data.\n   * @param {promise} futureAddressBookData - a promise of the AddressBook's data\n   */\n  AddressBook.prototype.$unwrap = function(futureAddressBookData) {\n    var _this = this;\n\n    this.$isLoading = true;\n\n    // Expose and resolve the promise\n    this.$futureAddressBookData = futureAddressBookData.then(function(response) {\n      return AddressBook.$timeout(function() {\n        var headers;\n\n        if (!response.ids || _this.$topIndex > response.ids.length - 1)\n          _this.$topIndex = 0;\n\n        // Extend AddressBook instance from data of addressbooks list.\n        // Will inherit attributes such as isEditable and isRemote.\n        angular.forEach(AddressBook.$findAll(), function(o, i) {\n          if (o.id == response.id) {\n            angular.extend(_this, o);\n          }\n        });\n\n        // Extend AddressBook instance with received data\n        _this.init(response);\n\n        if (_this.ids) {\n          AddressBook.$log.debug('unwrapping ' + _this.ids.length + ' cards');\n\n          // Instanciate Card objects\n          _.reduce(_this.ids, function(cards, card, i) {\n            var data = { pid: _this.id, id: card };\n\n            // Build map of ID <=> index\n            _this.idsMap[data.id] = i;\n\n            cards.push(new AddressBook.$Card(data));\n\n            return cards;\n          }, _this.$cards);\n        }\n\n        if (response.headers) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(response.headers[0], 'toLowerCase');\n          response.headers.splice(0, 1);\n\n          if (_this.ids) {\n            // Extend Card objects with received headers\n            _.forEach(response.headers, function(data) {\n              var o = _.zipObject(headers, data),\n                  i = _this.idsMap[o.id];\n              _this.$cards[i].init(o);\n            });\n          }\n          else {\n            // Instanciate Card objects\n            _this.$cards = [];\n            angular.forEach(response.headers, function(data) {\n              var o = _.zipObject(headers, data);\n              angular.extend(o, { pid: _this.id });\n              _this.$cards.push(new AddressBook.$Card(o));\n            });\n          }\n        }\n\n        // Instanciate Acl object\n        _this.$acl = new AddressBook.$$Acl('Contacts/' + _this.id);\n\n        _this.$startRefreshTimeout();\n\n        _this.$isLoading = false;\n\n        AddressBook.$log.debug('addressbook ' + _this.id + ' ready');\n\n        return _this;\n      });\n    }, function(data) {\n      _this.isError = true;\n      if (angular.isObject(data)) {\n        AddressBook.$timeout(function() {\n          angular.extend(_this, data);\n        });\n      }\n    });\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and extend matching Card objects with received data.\n   * @param {promise} futureHeadersData - a promise of the metadata of some cards\n   */\n  AddressBook.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      AddressBook.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(cardHeaders) {\n            cardHeaders = _.zipObject(headers, cardHeaders);\n            j = _this.idsMap[cardHeaders.id];\n            if (angular.isDefined(j)) {\n              _this.$cards[j].init(cardHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof AddressBook.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Addressbook instance\n   */\n  AddressBook.prototype.$omit = function() {\n    var addressbook = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'ids' &&\n          key[0] != '$') {\n        addressbook[key] = value;\n      }\n    });\n    return addressbook;\n  };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Card\n   * @constructor\n   * @param {object} futureCardData\n   * @param {string} [partial]\n   */\n  function Card(futureCardData, partial) {\n\n    // Data is immediately available\n    if (typeof futureCardData.then !== 'function') {\n      this.init(futureCardData, partial);\n      if (this.pid && !this.id) {\n        // Prepare for the creation of a new card;\n        // Get UID from the server.\n        var newCardData = Card.$$resource.newguid(this.pid);\n        this.$unwrap(newCardData);\n        this.isNew = true;\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureCardData);\n    }\n  }\n\n  Card.$TEL_TYPES = ['work', 'home', 'cell', 'fax', 'pager'];\n  Card.$EMAIL_TYPES = ['work', 'home', 'pref'];\n  Card.$URL_TYPES = ['work', 'home', 'pref'];\n  Card.$ADDRESS_TYPES = ['work', 'home'];\n\n  /**\n   * @memberof Card\n   * @desc The factory we'll use to register with Angular.\n   * @returns the Card constructor\n   */\n  Card.$factory = ['$timeout', 'sgSettings', 'sgCard_STATUS', 'Resource', 'Preferences', function($timeout, Settings, Card_STATUS, Resource, Preferences) {\n    angular.extend(Card, {\n      STATUS: Card_STATUS,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $timeout: $timeout,\n      $Preferences: Preferences\n    });\n    // Initialize categories from user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoContactsCategories) {\n        Card.$categories = Preferences.defaults.SOGoContactsCategories;\n      }\n      if (Preferences.defaults.SOGoAlternateAvatar)\n        Card.$alternateAvatar = Preferences.defaults.SOGoAlternateAvatar;\n    });\n\n    return Card; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of Card in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common', 'SOGo.PreferencesUI']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .constant('sgCard_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Card', Card.$factory);\n\n  /**\n   * @memberof Card\n   * @desc Fetch a card from a specific addressbook.\n   * @param {string} addressbookId - the addressbook ID\n   * @param {string} cardId - the card ID\n   * @see {@link AddressBook.$getCard}\n   */\n  Card.$find = function(addressbookId, cardId) {\n    var futureCardData = this.$$resource.fetch([addressbookId, cardId].join('/'), 'view');\n\n    if (cardId) return new Card(futureCardData); // a single card\n\n    return Card.$unwrapCollection(futureCardData); // a collection of cards\n  };\n\n  /**\n   * @function filterCategories\n   * @memberof Card.prototype\n   * @desc Search for categories matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Card.filterCategories = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.map(_.filter(Card.$categories, function(category) {\n      return category.search(re) != -1;\n    }), function(category) {\n      return { value: category };\n    });\n  };\n\n  /**\n   * @memberof Card\n   * @desc Unwrap to a collection of Card instances.\n   * @param {object} futureCardData\n   */\n  Card.$unwrapCollection = function(futureCardData) {\n    var collection = {};\n\n    collection.$futureCardData = futureCardData;\n\n    futureCardData.then(function(cards) {\n      Card.$timeout(function() {\n        angular.forEach(cards, function(data, index) {\n          collection[data.id] = new Card(data);\n        });\n      });\n    });\n\n    return collection;\n  };\n\n  /**\n   * @function init\n   * @memberof Card.prototype\n   * @desc Extend instance with required attributes and new data.\n   * @param {object} data - attributes of card\n   */\n  Card.prototype.init = function(data, partial) {\n    this.refs = [];\n    this.categories = [];\n    this.c_screenname = null;\n    angular.extend(this, data);\n    if (!this.$$fullname)\n      this.$$fullname = this.$fullname();\n    if (!this.$$email)\n      this.$$email = this.$preferredEmail(partial);\n    if (!this.$$image)\n      this.$$image = this.image || Card.$Preferences.avatar(this.$$email, 32, {no_404: true});\n    if (this.isgroup)\n      this.c_component = 'vlist';\n    this.$loaded = angular.isDefined(this.c_name)? Card.STATUS.LOADED : Card.STATUS.NOT_LOADED;\n\n    // An empty attribute to trick md-autocomplete when adding attendees from the appointment editor\n    this.empty = ' ';\n  };\n\n  /**\n   * @function $id\n   * @memberof Card.prototype\n   * @desc Return the card ID.\n   * @returns the card ID\n   */\n  Card.prototype.$id = function() {\n    return this.$futureCardData.then(function(data) {\n      return data.id;\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Card.prototype\n   * @returns true if the Card definition is still being retrieved from server after a specific delay\n   * @see sgCard_STATUS\n   */\n  Card.prototype.$isLoading = function() {\n    return this.$loaded == Card.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Card.prototype.$reload = function() {\n    var futureCardData;\n\n    if (this.$futureCardData)\n      return this;\n\n    futureCardData = Card.$$resource.fetch([this.pid, this.id].join('/'), 'view');\n\n    return this.$unwrap(futureCardData);\n  };\n\n  /**\n   * @function $save\n   * @memberof Card.prototype\n   * @desc Save the card to the server.\n   */\n  Card.prototype.$save = function() {\n    var _this = this,\n        action = 'saveAsContact';\n\n    if (this.c_component == 'vlist') action = 'saveAsList';\n\n    return Card.$$resource.save([this.pid, this.id || '_new_'].join('/'),\n                                this.$omit(),\n                                { action: action })\n      .then(function(data) {\n        // Format birthdate\n        if (_this.birthday)\n          _this.$birthday = Card.$Preferences.$mdDateLocaleProvider.formatDate(_this.birthday);\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  Card.prototype.$delete = function(attribute, index) {\n    if (attribute) {\n      if (index > -1 && this[attribute].length > index) {\n        this[attribute].splice(index, 1);\n      }\n      else\n        delete this[attribute];\n    }\n    else {\n      // No arguments -- delete card\n      return Card.$$resource.remove([this.pid, this.id].join('/'));\n    }\n  };\n\n  /**\n   * @function export\n   * @memberof Card.prototype\n   * @desc Download the current card\n   * @returns a promise of the HTTP operation\n   */\n  Card.prototype.export = function() {\n    var selectedIDs;\n\n    selectedIDs = [ this.id ];\n\n    return Card.$$resource.download(this.pid, 'export', {uids: selectedIDs}, {type: 'application/octet-stream'});\n  };\n\n  Card.prototype.$fullname = function(options) {\n    var fn = this.c_cn || '', html = options && options.html, names;\n    if (fn.length === 0) {\n      names = [];\n      if (this.c_givenname && this.c_givenname.length > 0)\n        names.push(this.c_givenname);\n      if (this.nickname && this.nickname.length > 0)\n        names.push((html?'<em>':'') + this.nickname + (html?'</em>':''));\n      if (this.c_sn && this.c_sn.length > 0)\n        names.push(this.c_sn);\n      if (names.length > 0)\n        fn = names.join(' ');\n      else if (this.c_org && this.c_org.length > 0) {\n        fn = this.c_org;\n      }\n      else if (this.emails && this.emails.length > 0) {\n        fn = _.find(this.emails, function(i) { return i.value !== ''; }).value;\n      }\n      else if (this.c_cn && this.c_cn.length > 0) {\n        fn = this.c_cn;\n      }\n    }\n\n    return fn;\n  };\n\n  Card.prototype.$description = function() {\n    var description = [];\n    if (this.title) description.push(this.title);\n    if (this.role) description.push(this.role);\n    if (this.orgUnits && this.orgUnits.length > 0)\n      _.forEach(this.orgUnits, function(unit) {\n        if (unit.value !== '')\n          description.push(unit.value);\n      });\n    if (this.c_org) description.push(this.c_org);\n    if (this.description) description.push(this.description);\n\n    return description.join(', ');\n  };\n\n  /**\n   * @function $preferredEmail\n   * @memberof Card.prototype\n   * @desc Get the preferred email address.\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the first email address of type \"pref\" or the first address if none found\n   */\n  Card.prototype.$preferredEmail = function(partial) {\n    var email, re;\n    if (partial) {\n      re = new RegExp(partial, 'i');\n      email = _.find(this.emails, function(o) {\n        return re.test(o.value);\n      });\n    }\n    if (email) {\n      email = email.value;\n    }\n    else {\n      email = _.find(this.emails, function(o) {\n        return o.type == 'pref';\n      });\n      if (email) {\n        email = email.value;\n      }\n      else if (this.emails && this.emails.length) {\n        email = this.emails[0].value;\n      }\n      else if (this.c_mail && this.c_mail.length) {\n        email = this.c_mail[0];\n      }\n      else {\n        email = '';\n      }\n    }\n\n    return email;\n  };\n\n  /**\n   * @function $shortFormat\n   * @memberof Card.prototype\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the fullname along with a matching email address in parentheses\n   */\n  Card.prototype.$shortFormat = function(partial) {\n    var fullname = [this.$$fullname],\n        email = this.$preferredEmail(partial);\n    if (email && email != this.$$fullname)\n      fullname.push(' <' + email + '>');\n    return fullname.join(' ');\n  };\n\n  Card.prototype.$isCard = function() {\n    return this.c_component == 'vcard';\n  };\n\n  Card.prototype.$isList = function(options) {\n    // isGroup attribute means it's a group of a LDAP source (not expandable on the client-side)\n    var condition = (!options || !options.expandable || options.expandable && !this.isgroup);\n    return this.c_component == 'vlist' && condition;\n  };\n\n  Card.prototype.$addOrgUnit = function(orgUnit) {\n    if (angular.isUndefined(this.orgUnits)) {\n      this.orgUnits = [{value: orgUnit}];\n    }\n    else {\n      for (var i = 0; i < this.orgUnits.length; i++) {\n        if (this.orgUnits[i].value == orgUnit) {\n          break;\n        }\n      }\n      if (i == this.orgUnits.length)\n        this.orgUnits.push({value: orgUnit});\n    }\n    return this.orgUnits.length - 1;\n  };\n\n  // Card.prototype.$addCategory = function(category) {\n  //   if (category) {\n  //     if (angular.isUndefined(this.categories)) {\n  //       this.categories = [{value: category}];\n  //     }\n  //     else {\n  //       for (var i = 0; i < this.categories.length; i++) {\n  //         if (this.categories[i].value == category) {\n  //           break;\n  //         }\n  //       }\n  //       if (i == this.categories.length)\n  //         this.categories.push({value: category});\n  //     }\n  //   }\n  // };\n\n  Card.prototype.$addEmail = function(type) {\n    if (angular.isUndefined(this.emails)) {\n      this.emails = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.emails, function(i) { return i.value === ''; }))) {\n      this.emails.push({type: type, value: ''});\n    }\n    return this.emails.length - 1;\n  };\n\n  Card.prototype.$addScreenName = function(screenName) {\n    this.c_screenname = screenName;\n  };\n\n  Card.prototype.$addPhone = function(type) {\n    if (angular.isUndefined(this.phones)) {\n      this.phones = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.phones, function(i) { return i.value === ''; }))) {\n      this.phones.push({type: type, value: ''});\n    }\n    return this.phones.length - 1;\n  };\n\n  Card.prototype.$addUrl = function(type, url) {\n    if (angular.isUndefined(this.urls)) {\n      this.urls = [{type: type, value: url}];\n    }\n    else if (_.isUndefined(_.find(this.urls, function(i) { return i.value == url; }))) {\n      this.urls.push({type: type, value: url});\n    }\n    return this.urls.length - 1;\n  };\n\n  Card.prototype.$addAddress = function(type, postoffice, street, street2, locality, region, country, postalcode) {\n    if (angular.isUndefined(this.addresses)) {\n      this.addresses = [{type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode}];\n    }\n    else if (!_.find(this.addresses, function(i) {\n      return i.street == street &&\n        i.street2 == street2 &&\n        i.locality == locality &&\n        i.country == country &&\n        i.postalcode == postalcode;\n    })) {\n      this.addresses.push({type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode});\n    }\n    return this.addresses.length - 1;\n  };\n\n  Card.prototype.$addMember = function(email) {\n    var card = new Card({email: email, emails: [{value: email}]}),\n        i;\n    if (angular.isUndefined(this.refs)) {\n      this.refs = [card];\n    }\n    else if (email.length === 0) {\n      this.refs.push(card);\n    }\n    else {\n      for (i = 0; i < this.refs.length; i++) {\n        if (this.refs[i].email == email) {\n          break;\n        }\n      }\n      if (i == this.refs.length)\n        this.refs.push(card);\n    }\n    return this.refs.length - 1;\n  };\n\n  /**\n   * @function explode\n   * @memberof Card.prototype\n   * @desc Create a new Card associated to each email address of this card.\n   * @return an array of Card instances\n   */\n  Card.prototype.explode = function() {\n    var _this = this, cards = [], data;\n\n    if (this.emails.length > 1) {\n      data = this.$omit();\n      _.forEach(this.emails, function(email) {\n        var card = new Card(angular.extend({}, data, {emails: [email]}));\n        cards.push(card);\n      });\n      return cards;\n    }\n    else\n      return [this];\n  };\n\n  /**\n   * @function $reset\n   * @memberof Card.prototype\n   * @desc Reset the original state the card's data.\n   */\n  Card.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    // Reinstanciate Card objects for list members\n    angular.forEach(this.refs, function(o, i) {\n      if (o.email) o.emails = [{value: o.email}];\n      _this.refs[i] = new Card(o);\n    });\n    this.$shadowData = this.$omit(true);\n  };\n\n  /**\n   * @function $updateMember\n   * @memberof Card.prototype\n   * @desc Update an existing list member from a Card instance.\n   * A list member has the following attribtues:\n   * - email\n   * - reference\n   * - fn\n   * @param {number} index\n   * @param {string} email\n   * @param {Card} card\n   */\n  // Card.prototype.$updateMember = function(index, email, card) {\n  //   var ref = {\n  //     email: email,\n  //     emails: [{value: email}],\n  //     reference: card.c_name,\n  //     c_cn: card.$fullname()\n  //   };\n  //   this.refs[index] = new Card(ref);\n  // };\n\n  /**\n   * @function $unwrap\n   * @memberof Card.prototype\n   * @desc Unwrap a promise and make a copy of the resolved data.\n   * @param {object} futureCardData - a promise of the Card's data\n   */\n  Card.prototype.$unwrap = function(futureCardData) {\n    var _this = this;\n\n    // Card is not loaded yet\n    this.$loaded = Card.STATUS.DELAYED_LOADING;\n    Card.$timeout(function() {\n      if (_this.$loaded != Card.STATUS.LOADED)\n        _this.$loaded = Card.STATUS.LOADING;\n    }, Card.STATUS.DELAYED_MS);\n\n    // Expose the promise\n    this.$futureCardData = futureCardData.then(function(data) {\n      _this.init(data);\n      // Instanciate Card objects for list members\n      angular.forEach(_this.refs, function(o, i) {\n        if (o.email) o.emails = [{value: o.email}];\n        o.id = o.reference;\n        _this.refs[i] = new Card(o);\n      });\n      if (_this.birthday) {\n        Card.$Preferences.ready().then(function() {\n          var dlp = Card.$Preferences.$mdDateLocaleProvider;\n          _this.birthday = _this.birthday.parseDate(dlp, '%Y-%m-%d');\n          _this.$birthday = dlp.formatDate(_this.birthday);\n        });\n      }\n      // Mark card as loaded\n      _this.$loaded = Card.STATUS.LOADED;\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit(true);\n\n      return _this;\n    });\n\n    return this.$futureCardData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Card.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Card instance\n   */\n  Card.prototype.$omit = function(deep) {\n    var card = {};\n    angular.forEach(this, function(value, key) {\n      if (key == 'refs') {\n        card.refs = _.map(value, function(o) {\n          return o.$omit(deep);\n        });\n      }\n      else if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          card[key] = angular.copy(value);\n        else\n          card[key] = value;\n      }\n    });\n\n    // We convert back our birthday object\n    if (!deep) {\n      if (card.birthday)\n        card.birthday = card.birthday.format(Card.$Preferences.$mdDateLocaleProvider, '%Y-%m-%d');\n      else\n        card.birthday = '';\n    }\n\n    return card;\n  };\n\n  Card.prototype.toString = function() {\n    var desc = this.id + ' ' + this.$$fullname;\n\n    if (this.$$email)\n      desc += ' <' + this.$$email + '>';\n\n    return '[' + desc + ']';\n  };\n})();\n"]}